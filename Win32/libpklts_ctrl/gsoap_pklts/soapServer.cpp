/* soapServer.cpp
   Generated by gSOAP 2.8.18 from gsoap_pklts.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.18 2014-10-24 16:23:17 GMT")


extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if (soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:getMACInfo"))
		return soap_serve_ns__getMACInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:setHostDetails"))
		return soap_serve_ns__setHostDetails(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:removeDevice"))
		return soap_serve_ns__removeDevice(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:getDeviceList"))
		return soap_serve_ns__getDeviceList(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:getDeviceParam"))
		return soap_serve_ns__getDeviceParam(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:setDeviceParam"))
		return soap_serve_ns__setDeviceParam(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:deviceCtrl"))
		return soap_serve_ns__deviceCtrl(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getMACInfo(struct soap *soap)
{	struct ns__getMACInfo soap_tmp_ns__getMACInfo;
	struct ns__GetHostDetailsRsp pOutputBuf;
	soap_default_ns__GetHostDetailsRsp(soap, &pOutputBuf);
	soap_default_ns__getMACInfo(soap, &soap_tmp_ns__getMACInfo);
	if (!soap_get_ns__getMACInfo(soap, &soap_tmp_ns__getMACInfo, "ns:getMACInfo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__getMACInfo(soap, soap_tmp_ns__getMACInfo.pInData, &pOutputBuf);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__GetHostDetailsRsp(soap, &pOutputBuf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetHostDetailsRsp(soap, &pOutputBuf, "ns:GetHostDetailsRsp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetHostDetailsRsp(soap, &pOutputBuf, "ns:GetHostDetailsRsp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__setHostDetails(struct soap *soap)
{	struct ns__setHostDetails soap_tmp_ns__setHostDetails;
	struct ns__SetHostDetailsRsp pOutputBuf;
	soap_default_ns__SetHostDetailsRsp(soap, &pOutputBuf);
	soap_default_ns__setHostDetails(soap, &soap_tmp_ns__setHostDetails);
	if (!soap_get_ns__setHostDetails(soap, &soap_tmp_ns__setHostDetails, "ns:setHostDetails", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__setHostDetails(soap, soap_tmp_ns__setHostDetails.pInData, &pOutputBuf);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__SetHostDetailsRsp(soap, &pOutputBuf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__SetHostDetailsRsp(soap, &pOutputBuf, "ns:SetHostDetailsRsp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__SetHostDetailsRsp(soap, &pOutputBuf, "ns:SetHostDetailsRsp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__removeDevice(struct soap *soap)
{	struct ns__removeDevice soap_tmp_ns__removeDevice;
	struct ns__RemoveDeviceRsp pOutputBuf;
	soap_default_ns__RemoveDeviceRsp(soap, &pOutputBuf);
	soap_default_ns__removeDevice(soap, &soap_tmp_ns__removeDevice);
	if (!soap_get_ns__removeDevice(soap, &soap_tmp_ns__removeDevice, "ns:removeDevice", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__removeDevice(soap, soap_tmp_ns__removeDevice.pInData, &pOutputBuf);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__RemoveDeviceRsp(soap, &pOutputBuf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__RemoveDeviceRsp(soap, &pOutputBuf, "ns:RemoveDeviceRsp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__RemoveDeviceRsp(soap, &pOutputBuf, "ns:RemoveDeviceRsp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getDeviceList(struct soap *soap)
{	struct ns__getDeviceList soap_tmp_ns__getDeviceList;
	struct ns__GetDeviceListRsp ppOutputBuf;
	soap_default_ns__GetDeviceListRsp(soap, &ppOutputBuf);
	soap_default_ns__getDeviceList(soap, &soap_tmp_ns__getDeviceList);
	if (!soap_get_ns__getDeviceList(soap, &soap_tmp_ns__getDeviceList, "ns:getDeviceList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__getDeviceList(soap, soap_tmp_ns__getDeviceList.pInData, &ppOutputBuf);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__GetDeviceListRsp(soap, &ppOutputBuf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetDeviceListRsp(soap, &ppOutputBuf, "ns:GetDeviceListRsp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetDeviceListRsp(soap, &ppOutputBuf, "ns:GetDeviceListRsp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getDeviceParam(struct soap *soap)
{	struct ns__getDeviceParam soap_tmp_ns__getDeviceParam;
	struct ns__GetDeviceParamRsp ppOutputBuf;
	soap_default_ns__GetDeviceParamRsp(soap, &ppOutputBuf);
	soap_default_ns__getDeviceParam(soap, &soap_tmp_ns__getDeviceParam);
	if (!soap_get_ns__getDeviceParam(soap, &soap_tmp_ns__getDeviceParam, "ns:getDeviceParam", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__getDeviceParam(soap, soap_tmp_ns__getDeviceParam.pInBuf, &ppOutputBuf);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__GetDeviceParamRsp(soap, &ppOutputBuf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetDeviceParamRsp(soap, &ppOutputBuf, "ns:GetDeviceParamRsp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetDeviceParamRsp(soap, &ppOutputBuf, "ns:GetDeviceParamRsp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__setDeviceParam(struct soap *soap)
{	struct ns__setDeviceParam soap_tmp_ns__setDeviceParam;
	struct ns__setDeviceParamRsp pOutputBuf;
	soap_default_ns__setDeviceParamRsp(soap, &pOutputBuf);
	soap_default_ns__setDeviceParam(soap, &soap_tmp_ns__setDeviceParam);
	if (!soap_get_ns__setDeviceParam(soap, &soap_tmp_ns__setDeviceParam, "ns:setDeviceParam", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__setDeviceParam(soap, soap_tmp_ns__setDeviceParam.pInData, &pOutputBuf);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__setDeviceParamRsp(soap, &pOutputBuf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setDeviceParamRsp(soap, &pOutputBuf, "ns:setDeviceParamRsp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setDeviceParamRsp(soap, &pOutputBuf, "ns:setDeviceParamRsp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__deviceCtrl(struct soap *soap)
{	struct ns__deviceCtrl soap_tmp_ns__deviceCtrl;
	struct ns__DeviceCtrlRsp pOutputBuf;
	soap_default_ns__DeviceCtrlRsp(soap, &pOutputBuf);
	soap_default_ns__deviceCtrl(soap, &soap_tmp_ns__deviceCtrl);
	if (!soap_get_ns__deviceCtrl(soap, &soap_tmp_ns__deviceCtrl, "ns:deviceCtrl", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__deviceCtrl(soap, soap_tmp_ns__deviceCtrl.pInData, &pOutputBuf);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__DeviceCtrlRsp(soap, &pOutputBuf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__DeviceCtrlRsp(soap, &pOutputBuf, "ns:DeviceCtrlRsp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__DeviceCtrlRsp(soap, &pOutputBuf, "ns:DeviceCtrlRsp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
