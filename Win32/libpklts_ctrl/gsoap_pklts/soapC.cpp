/* soapC.cpp
   Generated by gSOAP 2.8.18 from gsoap_pklts.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.18 2014-10-24 16:23:17 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_in_unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_ns__ErrMessage:
		return soap_in_ns__ErrMessage(soap, NULL, NULL, "ns:ErrMessage");
	case SOAP_TYPE_ns__deviceCtrl:
		return soap_in_ns__deviceCtrl(soap, NULL, NULL, "ns:deviceCtrl");
	case SOAP_TYPE_ns__setDeviceParam:
		return soap_in_ns__setDeviceParam(soap, NULL, NULL, "ns:setDeviceParam");
	case SOAP_TYPE_ns__getDeviceParam:
		return soap_in_ns__getDeviceParam(soap, NULL, NULL, "ns:getDeviceParam");
	case SOAP_TYPE_ns__getDeviceList:
		return soap_in_ns__getDeviceList(soap, NULL, NULL, "ns:getDeviceList");
	case SOAP_TYPE_ns__removeDevice:
		return soap_in_ns__removeDevice(soap, NULL, NULL, "ns:removeDevice");
	case SOAP_TYPE_ns__setHostDetails:
		return soap_in_ns__setHostDetails(soap, NULL, NULL, "ns:setHostDetails");
	case SOAP_TYPE_ns__getMACInfo:
		return soap_in_ns__getMACInfo(soap, NULL, NULL, "ns:getMACInfo");
	case SOAP_TYPE_ns__DeviceCtrlRsp:
		return soap_in_ns__DeviceCtrlRsp(soap, NULL, NULL, "ns:DeviceCtrlRsp");
	case SOAP_TYPE_ns__DeviceCtrlReq:
		return soap_in_ns__DeviceCtrlReq(soap, NULL, NULL, "ns:DeviceCtrlReq");
	case SOAP_TYPE_ns__setDeviceParamRsp:
		return soap_in_ns__setDeviceParamRsp(soap, NULL, NULL, "ns:setDeviceParamRsp");
	case SOAP_TYPE_ns__setDeviceParamReq:
		return soap_in_ns__setDeviceParamReq(soap, NULL, NULL, "ns:setDeviceParamReq");
	case SOAP_TYPE_ns__GetDeviceParamRsp:
		return soap_in_ns__GetDeviceParamRsp(soap, NULL, NULL, "ns:GetDeviceParamRsp");
	case SOAP_TYPE_ns__DeviceDAL:
		return soap_in_ns__DeviceDAL(soap, NULL, NULL, "ns:DeviceDAL");
	case SOAP_TYPE_ns__GetDeviceParamReq:
		return soap_in_ns__GetDeviceParamReq(soap, NULL, NULL, "ns:GetDeviceParamReq");
	case SOAP_TYPE_ns__GetDeviceListRsp:
		return soap_in_ns__GetDeviceListRsp(soap, NULL, NULL, "ns:GetDeviceListRsp");
	case SOAP_TYPE_ns__DeviceNodeArray:
		return soap_in_ns__DeviceNodeArray(soap, NULL, NULL, "ns:DeviceNodeArray");
	case SOAP_TYPE_ns__stCall_DeviceNode:
		return soap_in_ns__stCall_DeviceNode(soap, NULL, NULL, "ns:stCall-DeviceNode");
	case SOAP_TYPE_ns__GetDeviceListReq:
		return soap_in_ns__GetDeviceListReq(soap, NULL, NULL, "ns:GetDeviceListReq");
	case SOAP_TYPE_ns__RemoveDeviceRsp:
		return soap_in_ns__RemoveDeviceRsp(soap, NULL, NULL, "ns:RemoveDeviceRsp");
	case SOAP_TYPE_ns__RemoveDeviceReq:
		return soap_in_ns__RemoveDeviceReq(soap, NULL, NULL, "ns:RemoveDeviceReq");
	case SOAP_TYPE_ns__SetHostDetailsRsp:
		return soap_in_ns__SetHostDetailsRsp(soap, NULL, NULL, "ns:SetHostDetailsRsp");
	case SOAP_TYPE_ns__SetHostDetailsReq:
		return soap_in_ns__SetHostDetailsReq(soap, NULL, NULL, "ns:SetHostDetailsReq");
	case SOAP_TYPE_ns__GetHostDetailsRsp:
		return soap_in_ns__GetHostDetailsRsp(soap, NULL, NULL, "ns:GetHostDetailsRsp");
	case SOAP_TYPE_ns__GetHostDetailsReq:
		return soap_in_ns__GetHostDetailsReq(soap, NULL, NULL, "ns:GetHostDetailsReq");
	case SOAP_TYPE_PointerTons__DeviceCtrlRsp:
		return soap_in_PointerTons__DeviceCtrlRsp(soap, NULL, NULL, "ns:DeviceCtrlRsp");
	case SOAP_TYPE_PointerTons__DeviceCtrlReq:
		return soap_in_PointerTons__DeviceCtrlReq(soap, NULL, NULL, "ns:DeviceCtrlReq");
	case SOAP_TYPE_PointerTons__setDeviceParamRsp:
		return soap_in_PointerTons__setDeviceParamRsp(soap, NULL, NULL, "ns:setDeviceParamRsp");
	case SOAP_TYPE_PointerTons__setDeviceParamReq:
		return soap_in_PointerTons__setDeviceParamReq(soap, NULL, NULL, "ns:setDeviceParamReq");
	case SOAP_TYPE_PointerTons__GetDeviceParamRsp:
		return soap_in_PointerTons__GetDeviceParamRsp(soap, NULL, NULL, "ns:GetDeviceParamRsp");
	case SOAP_TYPE_PointerTons__GetDeviceParamReq:
		return soap_in_PointerTons__GetDeviceParamReq(soap, NULL, NULL, "ns:GetDeviceParamReq");
	case SOAP_TYPE_PointerTons__GetDeviceListRsp:
		return soap_in_PointerTons__GetDeviceListRsp(soap, NULL, NULL, "ns:GetDeviceListRsp");
	case SOAP_TYPE_PointerTons__GetDeviceListReq:
		return soap_in_PointerTons__GetDeviceListReq(soap, NULL, NULL, "ns:GetDeviceListReq");
	case SOAP_TYPE_PointerTons__RemoveDeviceRsp:
		return soap_in_PointerTons__RemoveDeviceRsp(soap, NULL, NULL, "ns:RemoveDeviceRsp");
	case SOAP_TYPE_PointerTons__RemoveDeviceReq:
		return soap_in_PointerTons__RemoveDeviceReq(soap, NULL, NULL, "ns:RemoveDeviceReq");
	case SOAP_TYPE_PointerTons__SetHostDetailsRsp:
		return soap_in_PointerTons__SetHostDetailsRsp(soap, NULL, NULL, "ns:SetHostDetailsRsp");
	case SOAP_TYPE_PointerTons__SetHostDetailsReq:
		return soap_in_PointerTons__SetHostDetailsReq(soap, NULL, NULL, "ns:SetHostDetailsReq");
	case SOAP_TYPE_PointerTons__GetHostDetailsRsp:
		return soap_in_PointerTons__GetHostDetailsRsp(soap, NULL, NULL, "ns:GetHostDetailsRsp");
	case SOAP_TYPE_PointerTons__GetHostDetailsReq:
		return soap_in_PointerTons__GetHostDetailsReq(soap, NULL, NULL, "ns:GetHostDetailsReq");
	case SOAP_TYPE_PointerToPointerTounsignedByte:
		return soap_in_PointerToPointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_PointerToPointerTons__stCall_DeviceNode:
		return soap_in_PointerToPointerTons__stCall_DeviceNode(soap, NULL, NULL, "ns:stCall-DeviceNode");
	case SOAP_TYPE_PointerTons__stCall_DeviceNode:
		return soap_in_PointerTons__stCall_DeviceNode(soap, NULL, NULL, "ns:stCall-DeviceNode");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_Array32Ofbyte:
		return soap_in_Array32Ofbyte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_Array24OfunsignedByte:
		return soap_in_Array24OfunsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_Array2OfunsignedByte:
		return soap_in_Array2OfunsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_Array8OfunsignedByte:
		return soap_in_Array8OfunsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_Array64Ofbyte:
		return soap_in_Array64Ofbyte(soap, NULL, NULL, "xsd:byte");
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_unsignedShort;
			return soap_in_unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ErrMessage"))
		{	*type = SOAP_TYPE_ns__ErrMessage;
			return soap_in_ns__ErrMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:deviceCtrl"))
		{	*type = SOAP_TYPE_ns__deviceCtrl;
			return soap_in_ns__deviceCtrl(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setDeviceParam"))
		{	*type = SOAP_TYPE_ns__setDeviceParam;
			return soap_in_ns__setDeviceParam(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getDeviceParam"))
		{	*type = SOAP_TYPE_ns__getDeviceParam;
			return soap_in_ns__getDeviceParam(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getDeviceList"))
		{	*type = SOAP_TYPE_ns__getDeviceList;
			return soap_in_ns__getDeviceList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:removeDevice"))
		{	*type = SOAP_TYPE_ns__removeDevice;
			return soap_in_ns__removeDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setHostDetails"))
		{	*type = SOAP_TYPE_ns__setHostDetails;
			return soap_in_ns__setHostDetails(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getMACInfo"))
		{	*type = SOAP_TYPE_ns__getMACInfo;
			return soap_in_ns__getMACInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DeviceCtrlRsp"))
		{	*type = SOAP_TYPE_ns__DeviceCtrlRsp;
			return soap_in_ns__DeviceCtrlRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DeviceCtrlReq"))
		{	*type = SOAP_TYPE_ns__DeviceCtrlReq;
			return soap_in_ns__DeviceCtrlReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setDeviceParamRsp"))
		{	*type = SOAP_TYPE_ns__setDeviceParamRsp;
			return soap_in_ns__setDeviceParamRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setDeviceParamReq"))
		{	*type = SOAP_TYPE_ns__setDeviceParamReq;
			return soap_in_ns__setDeviceParamReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:GetDeviceParamRsp"))
		{	*type = SOAP_TYPE_ns__GetDeviceParamRsp;
			return soap_in_ns__GetDeviceParamRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DeviceDAL"))
		{	*type = SOAP_TYPE_ns__DeviceDAL;
			return soap_in_ns__DeviceDAL(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:GetDeviceParamReq"))
		{	*type = SOAP_TYPE_ns__GetDeviceParamReq;
			return soap_in_ns__GetDeviceParamReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:GetDeviceListRsp"))
		{	*type = SOAP_TYPE_ns__GetDeviceListRsp;
			return soap_in_ns__GetDeviceListRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DeviceNodeArray"))
		{	*type = SOAP_TYPE_ns__DeviceNodeArray;
			return soap_in_ns__DeviceNodeArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:stCall-DeviceNode"))
		{	*type = SOAP_TYPE_ns__stCall_DeviceNode;
			return soap_in_ns__stCall_DeviceNode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:GetDeviceListReq"))
		{	*type = SOAP_TYPE_ns__GetDeviceListReq;
			return soap_in_ns__GetDeviceListReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:RemoveDeviceRsp"))
		{	*type = SOAP_TYPE_ns__RemoveDeviceRsp;
			return soap_in_ns__RemoveDeviceRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:RemoveDeviceReq"))
		{	*type = SOAP_TYPE_ns__RemoveDeviceReq;
			return soap_in_ns__RemoveDeviceReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SetHostDetailsRsp"))
		{	*type = SOAP_TYPE_ns__SetHostDetailsRsp;
			return soap_in_ns__SetHostDetailsRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SetHostDetailsReq"))
		{	*type = SOAP_TYPE_ns__SetHostDetailsReq;
			return soap_in_ns__SetHostDetailsReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:GetHostDetailsRsp"))
		{	*type = SOAP_TYPE_ns__GetHostDetailsRsp;
			return soap_in_ns__GetHostDetailsRsp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:GetHostDetailsReq"))
		{	*type = SOAP_TYPE_ns__GetHostDetailsReq;
			return soap_in_ns__GetHostDetailsReq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_Array32Ofbyte;
			return soap_in_Array32Ofbyte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_Array24OfunsignedByte;
			return soap_in_Array24OfunsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_Array2OfunsignedByte;
			return soap_in_Array2OfunsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_Array8OfunsignedByte;
			return soap_in_Array8OfunsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_Array64Ofbyte;
			return soap_in_Array64Ofbyte(soap, NULL, NULL, NULL);
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_ns__ErrMessage:
		return soap_out_ns__ErrMessage(soap, tag, id, (const enum ns__ErrMessage *)ptr, "ns:ErrMessage");
	case SOAP_TYPE_ns__deviceCtrl:
		return soap_out_ns__deviceCtrl(soap, tag, id, (const struct ns__deviceCtrl *)ptr, "ns:deviceCtrl");
	case SOAP_TYPE_ns__setDeviceParam:
		return soap_out_ns__setDeviceParam(soap, tag, id, (const struct ns__setDeviceParam *)ptr, "ns:setDeviceParam");
	case SOAP_TYPE_ns__getDeviceParam:
		return soap_out_ns__getDeviceParam(soap, tag, id, (const struct ns__getDeviceParam *)ptr, "ns:getDeviceParam");
	case SOAP_TYPE_ns__getDeviceList:
		return soap_out_ns__getDeviceList(soap, tag, id, (const struct ns__getDeviceList *)ptr, "ns:getDeviceList");
	case SOAP_TYPE_ns__removeDevice:
		return soap_out_ns__removeDevice(soap, tag, id, (const struct ns__removeDevice *)ptr, "ns:removeDevice");
	case SOAP_TYPE_ns__setHostDetails:
		return soap_out_ns__setHostDetails(soap, tag, id, (const struct ns__setHostDetails *)ptr, "ns:setHostDetails");
	case SOAP_TYPE_ns__getMACInfo:
		return soap_out_ns__getMACInfo(soap, tag, id, (const struct ns__getMACInfo *)ptr, "ns:getMACInfo");
	case SOAP_TYPE_ns__DeviceCtrlRsp:
		return soap_out_ns__DeviceCtrlRsp(soap, tag, id, (const struct ns__DeviceCtrlRsp *)ptr, "ns:DeviceCtrlRsp");
	case SOAP_TYPE_ns__DeviceCtrlReq:
		return soap_out_ns__DeviceCtrlReq(soap, tag, id, (const struct ns__DeviceCtrlReq *)ptr, "ns:DeviceCtrlReq");
	case SOAP_TYPE_ns__setDeviceParamRsp:
		return soap_out_ns__setDeviceParamRsp(soap, tag, id, (const struct ns__setDeviceParamRsp *)ptr, "ns:setDeviceParamRsp");
	case SOAP_TYPE_ns__setDeviceParamReq:
		return soap_out_ns__setDeviceParamReq(soap, tag, id, (const struct ns__setDeviceParamReq *)ptr, "ns:setDeviceParamReq");
	case SOAP_TYPE_ns__GetDeviceParamRsp:
		return soap_out_ns__GetDeviceParamRsp(soap, tag, id, (const struct ns__GetDeviceParamRsp *)ptr, "ns:GetDeviceParamRsp");
	case SOAP_TYPE_ns__DeviceDAL:
		return soap_out_ns__DeviceDAL(soap, tag, id, (const struct ns__DeviceDAL *)ptr, "ns:DeviceDAL");
	case SOAP_TYPE_ns__GetDeviceParamReq:
		return soap_out_ns__GetDeviceParamReq(soap, tag, id, (const struct ns__GetDeviceParamReq *)ptr, "ns:GetDeviceParamReq");
	case SOAP_TYPE_ns__GetDeviceListRsp:
		return soap_out_ns__GetDeviceListRsp(soap, tag, id, (const struct ns__GetDeviceListRsp *)ptr, "ns:GetDeviceListRsp");
	case SOAP_TYPE_ns__DeviceNodeArray:
		return soap_out_ns__DeviceNodeArray(soap, tag, id, (const struct ns__DeviceNodeArray *)ptr, "ns:DeviceNodeArray");
	case SOAP_TYPE_ns__stCall_DeviceNode:
		return soap_out_ns__stCall_DeviceNode(soap, tag, id, (const struct ns__stCall_DeviceNode *)ptr, "ns:stCall-DeviceNode");
	case SOAP_TYPE_ns__GetDeviceListReq:
		return soap_out_ns__GetDeviceListReq(soap, tag, id, (const struct ns__GetDeviceListReq *)ptr, "ns:GetDeviceListReq");
	case SOAP_TYPE_ns__RemoveDeviceRsp:
		return soap_out_ns__RemoveDeviceRsp(soap, tag, id, (const struct ns__RemoveDeviceRsp *)ptr, "ns:RemoveDeviceRsp");
	case SOAP_TYPE_ns__RemoveDeviceReq:
		return soap_out_ns__RemoveDeviceReq(soap, tag, id, (const struct ns__RemoveDeviceReq *)ptr, "ns:RemoveDeviceReq");
	case SOAP_TYPE_ns__SetHostDetailsRsp:
		return soap_out_ns__SetHostDetailsRsp(soap, tag, id, (const struct ns__SetHostDetailsRsp *)ptr, "ns:SetHostDetailsRsp");
	case SOAP_TYPE_ns__SetHostDetailsReq:
		return soap_out_ns__SetHostDetailsReq(soap, tag, id, (const struct ns__SetHostDetailsReq *)ptr, "ns:SetHostDetailsReq");
	case SOAP_TYPE_ns__GetHostDetailsRsp:
		return soap_out_ns__GetHostDetailsRsp(soap, tag, id, (const struct ns__GetHostDetailsRsp *)ptr, "ns:GetHostDetailsRsp");
	case SOAP_TYPE_ns__GetHostDetailsReq:
		return soap_out_ns__GetHostDetailsReq(soap, tag, id, (const struct ns__GetHostDetailsReq *)ptr, "ns:GetHostDetailsReq");
	case SOAP_TYPE_PointerTons__DeviceCtrlRsp:
		return soap_out_PointerTons__DeviceCtrlRsp(soap, tag, id, (struct ns__DeviceCtrlRsp *const*)ptr, "ns:DeviceCtrlRsp");
	case SOAP_TYPE_PointerTons__DeviceCtrlReq:
		return soap_out_PointerTons__DeviceCtrlReq(soap, tag, id, (struct ns__DeviceCtrlReq *const*)ptr, "ns:DeviceCtrlReq");
	case SOAP_TYPE_PointerTons__setDeviceParamRsp:
		return soap_out_PointerTons__setDeviceParamRsp(soap, tag, id, (struct ns__setDeviceParamRsp *const*)ptr, "ns:setDeviceParamRsp");
	case SOAP_TYPE_PointerTons__setDeviceParamReq:
		return soap_out_PointerTons__setDeviceParamReq(soap, tag, id, (struct ns__setDeviceParamReq *const*)ptr, "ns:setDeviceParamReq");
	case SOAP_TYPE_PointerTons__GetDeviceParamRsp:
		return soap_out_PointerTons__GetDeviceParamRsp(soap, tag, id, (struct ns__GetDeviceParamRsp *const*)ptr, "ns:GetDeviceParamRsp");
	case SOAP_TYPE_PointerTons__GetDeviceParamReq:
		return soap_out_PointerTons__GetDeviceParamReq(soap, tag, id, (struct ns__GetDeviceParamReq *const*)ptr, "ns:GetDeviceParamReq");
	case SOAP_TYPE_PointerTons__GetDeviceListRsp:
		return soap_out_PointerTons__GetDeviceListRsp(soap, tag, id, (struct ns__GetDeviceListRsp *const*)ptr, "ns:GetDeviceListRsp");
	case SOAP_TYPE_PointerTons__GetDeviceListReq:
		return soap_out_PointerTons__GetDeviceListReq(soap, tag, id, (struct ns__GetDeviceListReq *const*)ptr, "ns:GetDeviceListReq");
	case SOAP_TYPE_PointerTons__RemoveDeviceRsp:
		return soap_out_PointerTons__RemoveDeviceRsp(soap, tag, id, (struct ns__RemoveDeviceRsp *const*)ptr, "ns:RemoveDeviceRsp");
	case SOAP_TYPE_PointerTons__RemoveDeviceReq:
		return soap_out_PointerTons__RemoveDeviceReq(soap, tag, id, (struct ns__RemoveDeviceReq *const*)ptr, "ns:RemoveDeviceReq");
	case SOAP_TYPE_PointerTons__SetHostDetailsRsp:
		return soap_out_PointerTons__SetHostDetailsRsp(soap, tag, id, (struct ns__SetHostDetailsRsp *const*)ptr, "ns:SetHostDetailsRsp");
	case SOAP_TYPE_PointerTons__SetHostDetailsReq:
		return soap_out_PointerTons__SetHostDetailsReq(soap, tag, id, (struct ns__SetHostDetailsReq *const*)ptr, "ns:SetHostDetailsReq");
	case SOAP_TYPE_PointerTons__GetHostDetailsRsp:
		return soap_out_PointerTons__GetHostDetailsRsp(soap, tag, id, (struct ns__GetHostDetailsRsp *const*)ptr, "ns:GetHostDetailsRsp");
	case SOAP_TYPE_PointerTons__GetHostDetailsReq:
		return soap_out_PointerTons__GetHostDetailsReq(soap, tag, id, (struct ns__GetHostDetailsReq *const*)ptr, "ns:GetHostDetailsReq");
	case SOAP_TYPE_PointerToPointerTounsignedByte:
		return soap_out_PointerToPointerTounsignedByte(soap, tag, id, (unsigned char **const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_PointerToPointerTons__stCall_DeviceNode:
		return soap_out_PointerToPointerTons__stCall_DeviceNode(soap, tag, id, (struct ns__stCall_DeviceNode **const*)ptr, "ns:stCall-DeviceNode");
	case SOAP_TYPE_PointerTons__stCall_DeviceNode:
		return soap_out_PointerTons__stCall_DeviceNode(soap, tag, id, (struct ns__stCall_DeviceNode *const*)ptr, "ns:stCall-DeviceNode");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case SOAP_TYPE_Array32Ofbyte:
		return soap_out_Array32Ofbyte(soap, tag, id, (char (*))ptr, "xsd:byte");
	case SOAP_TYPE_Array24OfunsignedByte:
		return soap_out_Array24OfunsignedByte(soap, tag, id, (unsigned char (*))ptr, "xsd:unsignedByte");
	case SOAP_TYPE_Array2OfunsignedByte:
		return soap_out_Array2OfunsignedByte(soap, tag, id, (unsigned char (*))ptr, "xsd:unsignedByte");
	case SOAP_TYPE_Array8OfunsignedByte:
		return soap_out_Array8OfunsignedByte(soap, tag, id, (unsigned char (*))ptr, "xsd:unsignedByte");
	case SOAP_TYPE_Array64Ofbyte:
		return soap_out_Array64Ofbyte(soap, tag, id, (char (*))ptr, "xsd:byte");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns__deviceCtrl:
		soap_serialize_ns__deviceCtrl(soap, (const struct ns__deviceCtrl *)ptr);
		break;
	case SOAP_TYPE_ns__setDeviceParam:
		soap_serialize_ns__setDeviceParam(soap, (const struct ns__setDeviceParam *)ptr);
		break;
	case SOAP_TYPE_ns__getDeviceParam:
		soap_serialize_ns__getDeviceParam(soap, (const struct ns__getDeviceParam *)ptr);
		break;
	case SOAP_TYPE_ns__getDeviceList:
		soap_serialize_ns__getDeviceList(soap, (const struct ns__getDeviceList *)ptr);
		break;
	case SOAP_TYPE_ns__removeDevice:
		soap_serialize_ns__removeDevice(soap, (const struct ns__removeDevice *)ptr);
		break;
	case SOAP_TYPE_ns__setHostDetails:
		soap_serialize_ns__setHostDetails(soap, (const struct ns__setHostDetails *)ptr);
		break;
	case SOAP_TYPE_ns__getMACInfo:
		soap_serialize_ns__getMACInfo(soap, (const struct ns__getMACInfo *)ptr);
		break;
	case SOAP_TYPE_ns__DeviceCtrlRsp:
		soap_serialize_ns__DeviceCtrlRsp(soap, (const struct ns__DeviceCtrlRsp *)ptr);
		break;
	case SOAP_TYPE_ns__DeviceCtrlReq:
		soap_serialize_ns__DeviceCtrlReq(soap, (const struct ns__DeviceCtrlReq *)ptr);
		break;
	case SOAP_TYPE_ns__setDeviceParamRsp:
		soap_serialize_ns__setDeviceParamRsp(soap, (const struct ns__setDeviceParamRsp *)ptr);
		break;
	case SOAP_TYPE_ns__setDeviceParamReq:
		soap_serialize_ns__setDeviceParamReq(soap, (const struct ns__setDeviceParamReq *)ptr);
		break;
	case SOAP_TYPE_ns__GetDeviceParamRsp:
		soap_serialize_ns__GetDeviceParamRsp(soap, (const struct ns__GetDeviceParamRsp *)ptr);
		break;
	case SOAP_TYPE_ns__DeviceDAL:
		soap_serialize_ns__DeviceDAL(soap, (const struct ns__DeviceDAL *)ptr);
		break;
	case SOAP_TYPE_ns__GetDeviceParamReq:
		soap_serialize_ns__GetDeviceParamReq(soap, (const struct ns__GetDeviceParamReq *)ptr);
		break;
	case SOAP_TYPE_ns__GetDeviceListRsp:
		soap_serialize_ns__GetDeviceListRsp(soap, (const struct ns__GetDeviceListRsp *)ptr);
		break;
	case SOAP_TYPE_ns__DeviceNodeArray:
		soap_serialize_ns__DeviceNodeArray(soap, (const struct ns__DeviceNodeArray *)ptr);
		break;
	case SOAP_TYPE_ns__stCall_DeviceNode:
		soap_serialize_ns__stCall_DeviceNode(soap, (const struct ns__stCall_DeviceNode *)ptr);
		break;
	case SOAP_TYPE_ns__GetDeviceListReq:
		soap_serialize_ns__GetDeviceListReq(soap, (const struct ns__GetDeviceListReq *)ptr);
		break;
	case SOAP_TYPE_ns__RemoveDeviceRsp:
		soap_serialize_ns__RemoveDeviceRsp(soap, (const struct ns__RemoveDeviceRsp *)ptr);
		break;
	case SOAP_TYPE_ns__RemoveDeviceReq:
		soap_serialize_ns__RemoveDeviceReq(soap, (const struct ns__RemoveDeviceReq *)ptr);
		break;
	case SOAP_TYPE_ns__SetHostDetailsRsp:
		soap_serialize_ns__SetHostDetailsRsp(soap, (const struct ns__SetHostDetailsRsp *)ptr);
		break;
	case SOAP_TYPE_ns__SetHostDetailsReq:
		soap_serialize_ns__SetHostDetailsReq(soap, (const struct ns__SetHostDetailsReq *)ptr);
		break;
	case SOAP_TYPE_ns__GetHostDetailsRsp:
		soap_serialize_ns__GetHostDetailsRsp(soap, (const struct ns__GetHostDetailsRsp *)ptr);
		break;
	case SOAP_TYPE_ns__GetHostDetailsReq:
		soap_serialize_ns__GetHostDetailsReq(soap, (const struct ns__GetHostDetailsReq *)ptr);
		break;
	case SOAP_TYPE_PointerTons__DeviceCtrlRsp:
		soap_serialize_PointerTons__DeviceCtrlRsp(soap, (struct ns__DeviceCtrlRsp *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__DeviceCtrlReq:
		soap_serialize_PointerTons__DeviceCtrlReq(soap, (struct ns__DeviceCtrlReq *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__setDeviceParamRsp:
		soap_serialize_PointerTons__setDeviceParamRsp(soap, (struct ns__setDeviceParamRsp *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__setDeviceParamReq:
		soap_serialize_PointerTons__setDeviceParamReq(soap, (struct ns__setDeviceParamReq *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__GetDeviceParamRsp:
		soap_serialize_PointerTons__GetDeviceParamRsp(soap, (struct ns__GetDeviceParamRsp *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__GetDeviceParamReq:
		soap_serialize_PointerTons__GetDeviceParamReq(soap, (struct ns__GetDeviceParamReq *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__GetDeviceListRsp:
		soap_serialize_PointerTons__GetDeviceListRsp(soap, (struct ns__GetDeviceListRsp *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__GetDeviceListReq:
		soap_serialize_PointerTons__GetDeviceListReq(soap, (struct ns__GetDeviceListReq *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__RemoveDeviceRsp:
		soap_serialize_PointerTons__RemoveDeviceRsp(soap, (struct ns__RemoveDeviceRsp *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__RemoveDeviceReq:
		soap_serialize_PointerTons__RemoveDeviceReq(soap, (struct ns__RemoveDeviceReq *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__SetHostDetailsRsp:
		soap_serialize_PointerTons__SetHostDetailsRsp(soap, (struct ns__SetHostDetailsRsp *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__SetHostDetailsReq:
		soap_serialize_PointerTons__SetHostDetailsReq(soap, (struct ns__SetHostDetailsReq *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__GetHostDetailsRsp:
		soap_serialize_PointerTons__GetHostDetailsRsp(soap, (struct ns__GetHostDetailsRsp *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__GetHostDetailsReq:
		soap_serialize_PointerTons__GetHostDetailsReq(soap, (struct ns__GetHostDetailsReq *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTounsignedByte:
		soap_serialize_PointerToPointerTounsignedByte(soap, (unsigned char **const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons__stCall_DeviceNode:
		soap_serialize_PointerToPointerTons__stCall_DeviceNode(soap, (struct ns__stCall_DeviceNode **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__stCall_DeviceNode:
		soap_serialize_PointerTons__stCall_DeviceNode(soap, (struct ns__stCall_DeviceNode *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_Array32Ofbyte:
		soap_serialize_Array32Ofbyte(soap, (char (*))ptr);
		break;
	case SOAP_TYPE_Array24OfunsignedByte:
		soap_serialize_Array24OfunsignedByte(soap, (unsigned char (*))ptr);
		break;
	case SOAP_TYPE_Array2OfunsignedByte:
		soap_serialize_Array2OfunsignedByte(soap, (unsigned char (*))ptr);
		break;
	case SOAP_TYPE_Array8OfunsignedByte:
		soap_serialize_Array8OfunsignedByte(soap, (unsigned char (*))ptr);
		break;
	case SOAP_TYPE_Array64Ofbyte:
		soap_serialize_Array64Ofbyte(soap, (char (*))ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns__GetHostDetailsReq:
		return (void*)soap_instantiate_ns__GetHostDetailsReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__GetHostDetailsRsp:
		return (void*)soap_instantiate_ns__GetHostDetailsRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__SetHostDetailsReq:
		return (void*)soap_instantiate_ns__SetHostDetailsReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__SetHostDetailsRsp:
		return (void*)soap_instantiate_ns__SetHostDetailsRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__RemoveDeviceReq:
		return (void*)soap_instantiate_ns__RemoveDeviceReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__RemoveDeviceRsp:
		return (void*)soap_instantiate_ns__RemoveDeviceRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__GetDeviceListReq:
		return (void*)soap_instantiate_ns__GetDeviceListReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__stCall_DeviceNode:
		return (void*)soap_instantiate_ns__stCall_DeviceNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__DeviceNodeArray:
		return (void*)soap_instantiate_ns__DeviceNodeArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__GetDeviceListRsp:
		return (void*)soap_instantiate_ns__GetDeviceListRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__GetDeviceParamReq:
		return (void*)soap_instantiate_ns__GetDeviceParamReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__DeviceDAL:
		return (void*)soap_instantiate_ns__DeviceDAL(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__GetDeviceParamRsp:
		return (void*)soap_instantiate_ns__GetDeviceParamRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setDeviceParamReq:
		return (void*)soap_instantiate_ns__setDeviceParamReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setDeviceParamRsp:
		return (void*)soap_instantiate_ns__setDeviceParamRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__DeviceCtrlReq:
		return (void*)soap_instantiate_ns__DeviceCtrlReq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__DeviceCtrlRsp:
		return (void*)soap_instantiate_ns__DeviceCtrlRsp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getMACInfo:
		return (void*)soap_instantiate_ns__getMACInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setHostDetails:
		return (void*)soap_instantiate_ns__setHostDetails(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__removeDevice:
		return (void*)soap_instantiate_ns__removeDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getDeviceList:
		return (void*)soap_instantiate_ns__getDeviceList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getDeviceParam:
		return (void*)soap_instantiate_ns__getDeviceParam(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setDeviceParam:
		return (void*)soap_instantiate_ns__setDeviceParam(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__deviceCtrl:
		return (void*)soap_instantiate_ns__deviceCtrl(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns__GetHostDetailsReq:
		if (p->size < 0)
			SOAP_DELETE((struct ns__GetHostDetailsReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__GetHostDetailsReq*)p->ptr);
		break;
	case SOAP_TYPE_ns__GetHostDetailsRsp:
		if (p->size < 0)
			SOAP_DELETE((struct ns__GetHostDetailsRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__GetHostDetailsRsp*)p->ptr);
		break;
	case SOAP_TYPE_ns__SetHostDetailsReq:
		if (p->size < 0)
			SOAP_DELETE((struct ns__SetHostDetailsReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__SetHostDetailsReq*)p->ptr);
		break;
	case SOAP_TYPE_ns__SetHostDetailsRsp:
		if (p->size < 0)
			SOAP_DELETE((struct ns__SetHostDetailsRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__SetHostDetailsRsp*)p->ptr);
		break;
	case SOAP_TYPE_ns__RemoveDeviceReq:
		if (p->size < 0)
			SOAP_DELETE((struct ns__RemoveDeviceReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__RemoveDeviceReq*)p->ptr);
		break;
	case SOAP_TYPE_ns__RemoveDeviceRsp:
		if (p->size < 0)
			SOAP_DELETE((struct ns__RemoveDeviceRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__RemoveDeviceRsp*)p->ptr);
		break;
	case SOAP_TYPE_ns__GetDeviceListReq:
		if (p->size < 0)
			SOAP_DELETE((struct ns__GetDeviceListReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__GetDeviceListReq*)p->ptr);
		break;
	case SOAP_TYPE_ns__stCall_DeviceNode:
		if (p->size < 0)
			SOAP_DELETE((struct ns__stCall_DeviceNode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__stCall_DeviceNode*)p->ptr);
		break;
	case SOAP_TYPE_ns__DeviceNodeArray:
		if (p->size < 0)
			SOAP_DELETE((struct ns__DeviceNodeArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__DeviceNodeArray*)p->ptr);
		break;
	case SOAP_TYPE_ns__GetDeviceListRsp:
		if (p->size < 0)
			SOAP_DELETE((struct ns__GetDeviceListRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__GetDeviceListRsp*)p->ptr);
		break;
	case SOAP_TYPE_ns__GetDeviceParamReq:
		if (p->size < 0)
			SOAP_DELETE((struct ns__GetDeviceParamReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__GetDeviceParamReq*)p->ptr);
		break;
	case SOAP_TYPE_ns__DeviceDAL:
		if (p->size < 0)
			SOAP_DELETE((struct ns__DeviceDAL*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__DeviceDAL*)p->ptr);
		break;
	case SOAP_TYPE_ns__GetDeviceParamRsp:
		if (p->size < 0)
			SOAP_DELETE((struct ns__GetDeviceParamRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__GetDeviceParamRsp*)p->ptr);
		break;
	case SOAP_TYPE_ns__setDeviceParamReq:
		if (p->size < 0)
			SOAP_DELETE((struct ns__setDeviceParamReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__setDeviceParamReq*)p->ptr);
		break;
	case SOAP_TYPE_ns__setDeviceParamRsp:
		if (p->size < 0)
			SOAP_DELETE((struct ns__setDeviceParamRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__setDeviceParamRsp*)p->ptr);
		break;
	case SOAP_TYPE_ns__DeviceCtrlReq:
		if (p->size < 0)
			SOAP_DELETE((struct ns__DeviceCtrlReq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__DeviceCtrlReq*)p->ptr);
		break;
	case SOAP_TYPE_ns__DeviceCtrlRsp:
		if (p->size < 0)
			SOAP_DELETE((struct ns__DeviceCtrlRsp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__DeviceCtrlRsp*)p->ptr);
		break;
	case SOAP_TYPE_ns__getMACInfo:
		if (p->size < 0)
			SOAP_DELETE((struct ns__getMACInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__getMACInfo*)p->ptr);
		break;
	case SOAP_TYPE_ns__setHostDetails:
		if (p->size < 0)
			SOAP_DELETE((struct ns__setHostDetails*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__setHostDetails*)p->ptr);
		break;
	case SOAP_TYPE_ns__removeDevice:
		if (p->size < 0)
			SOAP_DELETE((struct ns__removeDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__removeDevice*)p->ptr);
		break;
	case SOAP_TYPE_ns__getDeviceList:
		if (p->size < 0)
			SOAP_DELETE((struct ns__getDeviceList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__getDeviceList*)p->ptr);
		break;
	case SOAP_TYPE_ns__getDeviceParam:
		if (p->size < 0)
			SOAP_DELETE((struct ns__getDeviceParam*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__getDeviceParam*)p->ptr);
		break;
	case SOAP_TYPE_ns__setDeviceParam:
		if (p->size < 0)
			SOAP_DELETE((struct ns__setDeviceParam*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__setDeviceParam*)p->ptr);
		break;
	case SOAP_TYPE_ns__deviceCtrl:
		if (p->size < 0)
			SOAP_DELETE((struct ns__deviceCtrl*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__deviceCtrl*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{	unsigned short *p;
	p = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_unsignedShort);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedShort);
	if (soap_out_unsignedShort(soap, tag?tag:"unsignedShort", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ErrMessage(struct soap *soap, enum ns__ErrMessage *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__ErrMessage
	*a = SOAP_DEFAULT_ns__ErrMessage;
#else
	*a = (enum ns__ErrMessage)0;
#endif
}

static const struct soap_code_map soap_codes_ns__ErrMessage[] =
{	{ (long)ALL_SUCCEED, "ALL-SUCCEED" },
	{ (long)ERRNET_WSAStartupFailed, "ERRNET-WSAStartupFailed" },
	{ (long)ERRNET_GetAddrInfoError, "ERRNET-GetAddrInfoError" },
	{ (long)ERRNET_SocketFailedErr, "ERRNET-SocketFailedErr" },
	{ (long)ERRNET_ConnectionFailed, "ERRNET-ConnectionFailed" },
	{ (long)ERRNET_SendDataFailed, "ERRNET-SendDataFailed" },
	{ (long)ERRNET_RecvDataFailed, "ERRNET-RecvDataFailed" },
	{ (long)ERRNET_ShutDownFailed, "ERRNET-ShutDownFailed" },
	{ (long)ERRTRANS_ERROR_MARK, "ERRTRANS-ERROR-MARK" },
	{ (long)ERRTRANS_LESS_DATA, "ERRTRANS-LESS-DATA" },
	{ (long)ERRTRANS_DST_NOT_REACHABLE, "ERRTRANS-DST-NOT-REACHABLE" },
	{ (long)ERRTRANS_ERROR_MSG_TYPE, "ERRTRANS-ERROR-MSG-TYPE" },
	{ (long)ERRTRANS_ERROR_DATA, "ERRTRANS-ERROR-DATA" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__ErrMessage2s(struct soap *soap, enum ns__ErrMessage n)
{	const char *s = soap_code_str(soap_codes_ns__ErrMessage, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ErrMessage(struct soap *soap, const char *tag, int id, const enum ns__ErrMessage *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ErrMessage), type) || soap_send(soap, soap_ns__ErrMessage2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__ErrMessage(struct soap *soap, const char *s, enum ns__ErrMessage *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__ErrMessage, s);
	if (map)
		*a = (enum ns__ErrMessage)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 20)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__ErrMessage)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__ErrMessage * SOAP_FMAC4 soap_in_ns__ErrMessage(struct soap *soap, const char *tag, enum ns__ErrMessage *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__ErrMessage *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ErrMessage, sizeof(enum ns__ErrMessage), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns__ErrMessage(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__ErrMessage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ErrMessage, 0, sizeof(enum ns__ErrMessage), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ErrMessage(struct soap *soap, const enum ns__ErrMessage *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__ErrMessage);
	if (soap_out_ns__ErrMessage(soap, tag?tag:"ns:ErrMessage", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__ErrMessage * SOAP_FMAC4 soap_get_ns__ErrMessage(struct soap *soap, enum ns__ErrMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ErrMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__deviceCtrl(struct soap *soap, struct ns__deviceCtrl *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->pInData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__deviceCtrl(struct soap *soap, const struct ns__deviceCtrl *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__DeviceCtrlReq(soap, &a->pInData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__deviceCtrl(struct soap *soap, const char *tag, int id, const struct ns__deviceCtrl *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__deviceCtrl), type))
		return soap->error;
	if (soap_out_PointerTons__DeviceCtrlReq(soap, "pInData", -1, &a->pInData, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__deviceCtrl * SOAP_FMAC4 soap_in_ns__deviceCtrl(struct soap *soap, const char *tag, struct ns__deviceCtrl *a, const char *type)
{
	size_t soap_flag_pInData = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__deviceCtrl *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__deviceCtrl, sizeof(struct ns__deviceCtrl), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__deviceCtrl(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_pInData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__DeviceCtrlReq(soap, "pInData", &a->pInData, "ns:DeviceCtrlReq"))
				{	soap_flag_pInData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__deviceCtrl *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__deviceCtrl, 0, sizeof(struct ns__deviceCtrl), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__deviceCtrl(struct soap *soap, const struct ns__deviceCtrl *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__deviceCtrl);
	if (soap_out_ns__deviceCtrl(soap, tag?tag:"ns:deviceCtrl", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__deviceCtrl * SOAP_FMAC4 soap_get_ns__deviceCtrl(struct soap *soap, struct ns__deviceCtrl *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__deviceCtrl(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__deviceCtrl * SOAP_FMAC2 soap_instantiate_ns__deviceCtrl(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__deviceCtrl(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__deviceCtrl, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__deviceCtrl);
		if (size)
			*size = sizeof(struct ns__deviceCtrl);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__deviceCtrl, n);
		if (size)
			*size = n * sizeof(struct ns__deviceCtrl);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__deviceCtrl*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__deviceCtrl(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__deviceCtrl %p -> %p\n", q, p));
	*(struct ns__deviceCtrl*)p = *(struct ns__deviceCtrl*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setDeviceParam(struct soap *soap, struct ns__setDeviceParam *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->pInData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setDeviceParam(struct soap *soap, const struct ns__setDeviceParam *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__setDeviceParamReq(soap, &a->pInData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setDeviceParam(struct soap *soap, const char *tag, int id, const struct ns__setDeviceParam *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setDeviceParam), type))
		return soap->error;
	if (soap_out_PointerTons__setDeviceParamReq(soap, "pInData", -1, &a->pInData, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setDeviceParam * SOAP_FMAC4 soap_in_ns__setDeviceParam(struct soap *soap, const char *tag, struct ns__setDeviceParam *a, const char *type)
{
	size_t soap_flag_pInData = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setDeviceParam *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setDeviceParam, sizeof(struct ns__setDeviceParam), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setDeviceParam(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_pInData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__setDeviceParamReq(soap, "pInData", &a->pInData, "ns:setDeviceParamReq"))
				{	soap_flag_pInData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setDeviceParam *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setDeviceParam, 0, sizeof(struct ns__setDeviceParam), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setDeviceParam(struct soap *soap, const struct ns__setDeviceParam *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setDeviceParam);
	if (soap_out_ns__setDeviceParam(soap, tag?tag:"ns:setDeviceParam", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setDeviceParam * SOAP_FMAC4 soap_get_ns__setDeviceParam(struct soap *soap, struct ns__setDeviceParam *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setDeviceParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setDeviceParam * SOAP_FMAC2 soap_instantiate_ns__setDeviceParam(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setDeviceParam(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setDeviceParam, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__setDeviceParam);
		if (size)
			*size = sizeof(struct ns__setDeviceParam);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__setDeviceParam, n);
		if (size)
			*size = n * sizeof(struct ns__setDeviceParam);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__setDeviceParam*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setDeviceParam(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setDeviceParam %p -> %p\n", q, p));
	*(struct ns__setDeviceParam*)p = *(struct ns__setDeviceParam*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getDeviceParam(struct soap *soap, struct ns__getDeviceParam *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->pInBuf = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getDeviceParam(struct soap *soap, const struct ns__getDeviceParam *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__GetDeviceParamReq(soap, &a->pInBuf);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getDeviceParam(struct soap *soap, const char *tag, int id, const struct ns__getDeviceParam *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getDeviceParam), type))
		return soap->error;
	if (soap_out_PointerTons__GetDeviceParamReq(soap, "pInBuf", -1, &a->pInBuf, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getDeviceParam * SOAP_FMAC4 soap_in_ns__getDeviceParam(struct soap *soap, const char *tag, struct ns__getDeviceParam *a, const char *type)
{
	size_t soap_flag_pInBuf = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getDeviceParam *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getDeviceParam, sizeof(struct ns__getDeviceParam), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getDeviceParam(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_pInBuf && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__GetDeviceParamReq(soap, "pInBuf", &a->pInBuf, "ns:GetDeviceParamReq"))
				{	soap_flag_pInBuf--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getDeviceParam *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getDeviceParam, 0, sizeof(struct ns__getDeviceParam), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getDeviceParam(struct soap *soap, const struct ns__getDeviceParam *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getDeviceParam);
	if (soap_out_ns__getDeviceParam(soap, tag?tag:"ns:getDeviceParam", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getDeviceParam * SOAP_FMAC4 soap_get_ns__getDeviceParam(struct soap *soap, struct ns__getDeviceParam *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getDeviceParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getDeviceParam * SOAP_FMAC2 soap_instantiate_ns__getDeviceParam(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getDeviceParam(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getDeviceParam, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__getDeviceParam);
		if (size)
			*size = sizeof(struct ns__getDeviceParam);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__getDeviceParam, n);
		if (size)
			*size = n * sizeof(struct ns__getDeviceParam);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getDeviceParam*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getDeviceParam(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getDeviceParam %p -> %p\n", q, p));
	*(struct ns__getDeviceParam*)p = *(struct ns__getDeviceParam*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getDeviceList(struct soap *soap, struct ns__getDeviceList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->pInData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getDeviceList(struct soap *soap, const struct ns__getDeviceList *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__GetDeviceListReq(soap, &a->pInData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getDeviceList(struct soap *soap, const char *tag, int id, const struct ns__getDeviceList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getDeviceList), type))
		return soap->error;
	if (soap_out_PointerTons__GetDeviceListReq(soap, "pInData", -1, &a->pInData, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getDeviceList * SOAP_FMAC4 soap_in_ns__getDeviceList(struct soap *soap, const char *tag, struct ns__getDeviceList *a, const char *type)
{
	size_t soap_flag_pInData = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getDeviceList *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getDeviceList, sizeof(struct ns__getDeviceList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getDeviceList(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_pInData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__GetDeviceListReq(soap, "pInData", &a->pInData, "ns:GetDeviceListReq"))
				{	soap_flag_pInData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getDeviceList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getDeviceList, 0, sizeof(struct ns__getDeviceList), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getDeviceList(struct soap *soap, const struct ns__getDeviceList *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getDeviceList);
	if (soap_out_ns__getDeviceList(soap, tag?tag:"ns:getDeviceList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getDeviceList * SOAP_FMAC4 soap_get_ns__getDeviceList(struct soap *soap, struct ns__getDeviceList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getDeviceList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getDeviceList * SOAP_FMAC2 soap_instantiate_ns__getDeviceList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getDeviceList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getDeviceList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__getDeviceList);
		if (size)
			*size = sizeof(struct ns__getDeviceList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__getDeviceList, n);
		if (size)
			*size = n * sizeof(struct ns__getDeviceList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getDeviceList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getDeviceList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getDeviceList %p -> %p\n", q, p));
	*(struct ns__getDeviceList*)p = *(struct ns__getDeviceList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__removeDevice(struct soap *soap, struct ns__removeDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->pInData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__removeDevice(struct soap *soap, const struct ns__removeDevice *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__RemoveDeviceReq(soap, &a->pInData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__removeDevice(struct soap *soap, const char *tag, int id, const struct ns__removeDevice *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__removeDevice), type))
		return soap->error;
	if (soap_out_PointerTons__RemoveDeviceReq(soap, "pInData", -1, &a->pInData, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__removeDevice * SOAP_FMAC4 soap_in_ns__removeDevice(struct soap *soap, const char *tag, struct ns__removeDevice *a, const char *type)
{
	size_t soap_flag_pInData = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__removeDevice *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__removeDevice, sizeof(struct ns__removeDevice), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__removeDevice(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_pInData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__RemoveDeviceReq(soap, "pInData", &a->pInData, "ns:RemoveDeviceReq"))
				{	soap_flag_pInData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__removeDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__removeDevice, 0, sizeof(struct ns__removeDevice), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__removeDevice(struct soap *soap, const struct ns__removeDevice *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__removeDevice);
	if (soap_out_ns__removeDevice(soap, tag?tag:"ns:removeDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__removeDevice * SOAP_FMAC4 soap_get_ns__removeDevice(struct soap *soap, struct ns__removeDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__removeDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__removeDevice * SOAP_FMAC2 soap_instantiate_ns__removeDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__removeDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__removeDevice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__removeDevice);
		if (size)
			*size = sizeof(struct ns__removeDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__removeDevice, n);
		if (size)
			*size = n * sizeof(struct ns__removeDevice);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__removeDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__removeDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__removeDevice %p -> %p\n", q, p));
	*(struct ns__removeDevice*)p = *(struct ns__removeDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setHostDetails(struct soap *soap, struct ns__setHostDetails *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->pInData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setHostDetails(struct soap *soap, const struct ns__setHostDetails *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__SetHostDetailsReq(soap, &a->pInData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setHostDetails(struct soap *soap, const char *tag, int id, const struct ns__setHostDetails *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setHostDetails), type))
		return soap->error;
	if (soap_out_PointerTons__SetHostDetailsReq(soap, "pInData", -1, &a->pInData, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setHostDetails * SOAP_FMAC4 soap_in_ns__setHostDetails(struct soap *soap, const char *tag, struct ns__setHostDetails *a, const char *type)
{
	size_t soap_flag_pInData = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setHostDetails *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setHostDetails, sizeof(struct ns__setHostDetails), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setHostDetails(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_pInData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__SetHostDetailsReq(soap, "pInData", &a->pInData, "ns:SetHostDetailsReq"))
				{	soap_flag_pInData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setHostDetails *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setHostDetails, 0, sizeof(struct ns__setHostDetails), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setHostDetails(struct soap *soap, const struct ns__setHostDetails *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setHostDetails);
	if (soap_out_ns__setHostDetails(soap, tag?tag:"ns:setHostDetails", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setHostDetails * SOAP_FMAC4 soap_get_ns__setHostDetails(struct soap *soap, struct ns__setHostDetails *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setHostDetails(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setHostDetails * SOAP_FMAC2 soap_instantiate_ns__setHostDetails(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setHostDetails(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setHostDetails, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__setHostDetails);
		if (size)
			*size = sizeof(struct ns__setHostDetails);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__setHostDetails, n);
		if (size)
			*size = n * sizeof(struct ns__setHostDetails);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__setHostDetails*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setHostDetails(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setHostDetails %p -> %p\n", q, p));
	*(struct ns__setHostDetails*)p = *(struct ns__setHostDetails*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getMACInfo(struct soap *soap, struct ns__getMACInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->pInData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getMACInfo(struct soap *soap, const struct ns__getMACInfo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__GetHostDetailsReq(soap, &a->pInData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getMACInfo(struct soap *soap, const char *tag, int id, const struct ns__getMACInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getMACInfo), type))
		return soap->error;
	if (soap_out_PointerTons__GetHostDetailsReq(soap, "pInData", -1, &a->pInData, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getMACInfo * SOAP_FMAC4 soap_in_ns__getMACInfo(struct soap *soap, const char *tag, struct ns__getMACInfo *a, const char *type)
{
	size_t soap_flag_pInData = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getMACInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getMACInfo, sizeof(struct ns__getMACInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getMACInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_pInData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__GetHostDetailsReq(soap, "pInData", &a->pInData, "ns:GetHostDetailsReq"))
				{	soap_flag_pInData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getMACInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getMACInfo, 0, sizeof(struct ns__getMACInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getMACInfo(struct soap *soap, const struct ns__getMACInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getMACInfo);
	if (soap_out_ns__getMACInfo(soap, tag?tag:"ns:getMACInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getMACInfo * SOAP_FMAC4 soap_get_ns__getMACInfo(struct soap *soap, struct ns__getMACInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getMACInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getMACInfo * SOAP_FMAC2 soap_instantiate_ns__getMACInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getMACInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getMACInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__getMACInfo);
		if (size)
			*size = sizeof(struct ns__getMACInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__getMACInfo, n);
		if (size)
			*size = n * sizeof(struct ns__getMACInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getMACInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getMACInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getMACInfo %p -> %p\n", q, p));
	*(struct ns__getMACInfo*)p = *(struct ns__getMACInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DeviceCtrlRsp(struct soap *soap, struct ns__DeviceCtrlRsp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__ErrMessage(soap, &a->retCode);
	soap_default_unsignedByte(soap, &a->DoneCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DeviceCtrlRsp(struct soap *soap, const struct ns__DeviceCtrlRsp *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->DoneCode, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceCtrlRsp(struct soap *soap, const char *tag, int id, const struct ns__DeviceCtrlRsp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__DeviceCtrlRsp), type))
		return soap->error;
	if (soap_out_ns__ErrMessage(soap, "retCode", -1, &a->retCode, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "DoneCode", -1, &a->DoneCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__DeviceCtrlRsp * SOAP_FMAC4 soap_in_ns__DeviceCtrlRsp(struct soap *soap, const char *tag, struct ns__DeviceCtrlRsp *a, const char *type)
{
	size_t soap_flag_retCode = 1;
	size_t soap_flag_DoneCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__DeviceCtrlRsp *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__DeviceCtrlRsp, sizeof(struct ns__DeviceCtrlRsp), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__DeviceCtrlRsp(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_retCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__ErrMessage(soap, "retCode", &a->retCode, "ns:ErrMessage"))
				{	soap_flag_retCode--;
					continue;
				}
			if (soap_flag_DoneCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "DoneCode", &a->DoneCode, "xsd:unsignedByte"))
				{	soap_flag_DoneCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__DeviceCtrlRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__DeviceCtrlRsp, 0, sizeof(struct ns__DeviceCtrlRsp), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_retCode > 0 || soap_flag_DoneCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeviceCtrlRsp(struct soap *soap, const struct ns__DeviceCtrlRsp *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__DeviceCtrlRsp);
	if (soap_out_ns__DeviceCtrlRsp(soap, tag?tag:"ns:DeviceCtrlRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DeviceCtrlRsp * SOAP_FMAC4 soap_get_ns__DeviceCtrlRsp(struct soap *soap, struct ns__DeviceCtrlRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DeviceCtrlRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__DeviceCtrlRsp * SOAP_FMAC2 soap_instantiate_ns__DeviceCtrlRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DeviceCtrlRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__DeviceCtrlRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DeviceCtrlRsp);
		if (size)
			*size = sizeof(struct ns__DeviceCtrlRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__DeviceCtrlRsp, n);
		if (size)
			*size = n * sizeof(struct ns__DeviceCtrlRsp);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__DeviceCtrlRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DeviceCtrlRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__DeviceCtrlRsp %p -> %p\n", q, p));
	*(struct ns__DeviceCtrlRsp*)p = *(struct ns__DeviceCtrlRsp*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DeviceCtrlReq(struct soap *soap, struct ns__DeviceCtrlReq *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->macID);
	soap_default_Array24OfunsignedByte(soap, a->DeviceID);
	soap_default_ns__DeviceDAL(soap, &a->DAL);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DeviceCtrlReq(struct soap *soap, const struct ns__DeviceCtrlReq *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_Array24OfunsignedByte(soap, a->DeviceID);
	soap_serialize_ns__DeviceDAL(soap, &a->DAL);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceCtrlReq(struct soap *soap, const char *tag, int id, const struct ns__DeviceCtrlReq *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__DeviceCtrlReq), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "macID", -1, &a->macID, ""))
		return soap->error;
	soap_out_Array24OfunsignedByte(soap, "DeviceID", -1, a->DeviceID, "");
	if (soap_out_ns__DeviceDAL(soap, "DAL", -1, &a->DAL, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__DeviceCtrlReq * SOAP_FMAC4 soap_in_ns__DeviceCtrlReq(struct soap *soap, const char *tag, struct ns__DeviceCtrlReq *a, const char *type)
{
	size_t soap_flag_macID = 1;
	size_t soap_flag_DeviceID = 1;
	size_t soap_flag_DAL = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__DeviceCtrlReq *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__DeviceCtrlReq, sizeof(struct ns__DeviceCtrlReq), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__DeviceCtrlReq(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_macID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "macID", &a->macID, "xsd:unsignedInt"))
				{	soap_flag_macID--;
					continue;
				}
			if (soap_flag_DeviceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array24OfunsignedByte(soap, "DeviceID", a->DeviceID, "xsd:unsignedByte"))
				{	soap_flag_DeviceID--;
					continue;
				}
			if (soap_flag_DAL && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__DeviceDAL(soap, "DAL", &a->DAL, "ns:DeviceDAL"))
				{	soap_flag_DAL--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__DeviceCtrlReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__DeviceCtrlReq, 0, sizeof(struct ns__DeviceCtrlReq), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_macID > 0 || soap_flag_DeviceID > 0 || soap_flag_DAL > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeviceCtrlReq(struct soap *soap, const struct ns__DeviceCtrlReq *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__DeviceCtrlReq);
	if (soap_out_ns__DeviceCtrlReq(soap, tag?tag:"ns:DeviceCtrlReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DeviceCtrlReq * SOAP_FMAC4 soap_get_ns__DeviceCtrlReq(struct soap *soap, struct ns__DeviceCtrlReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DeviceCtrlReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__DeviceCtrlReq * SOAP_FMAC2 soap_instantiate_ns__DeviceCtrlReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DeviceCtrlReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__DeviceCtrlReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DeviceCtrlReq);
		if (size)
			*size = sizeof(struct ns__DeviceCtrlReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__DeviceCtrlReq, n);
		if (size)
			*size = n * sizeof(struct ns__DeviceCtrlReq);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__DeviceCtrlReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DeviceCtrlReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__DeviceCtrlReq %p -> %p\n", q, p));
	*(struct ns__DeviceCtrlReq*)p = *(struct ns__DeviceCtrlReq*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setDeviceParamRsp(struct soap *soap, struct ns__setDeviceParamRsp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__ErrMessage(soap, &a->retCode);
	soap_default_unsignedByte(soap, &a->DoneCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setDeviceParamRsp(struct soap *soap, const struct ns__setDeviceParamRsp *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->DoneCode, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setDeviceParamRsp(struct soap *soap, const char *tag, int id, const struct ns__setDeviceParamRsp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setDeviceParamRsp), type))
		return soap->error;
	if (soap_out_ns__ErrMessage(soap, "retCode", -1, &a->retCode, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "DoneCode", -1, &a->DoneCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setDeviceParamRsp * SOAP_FMAC4 soap_in_ns__setDeviceParamRsp(struct soap *soap, const char *tag, struct ns__setDeviceParamRsp *a, const char *type)
{
	size_t soap_flag_retCode = 1;
	size_t soap_flag_DoneCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setDeviceParamRsp *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setDeviceParamRsp, sizeof(struct ns__setDeviceParamRsp), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setDeviceParamRsp(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_retCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__ErrMessage(soap, "retCode", &a->retCode, "ns:ErrMessage"))
				{	soap_flag_retCode--;
					continue;
				}
			if (soap_flag_DoneCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "DoneCode", &a->DoneCode, "xsd:unsignedByte"))
				{	soap_flag_DoneCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setDeviceParamRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setDeviceParamRsp, 0, sizeof(struct ns__setDeviceParamRsp), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_retCode > 0 || soap_flag_DoneCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setDeviceParamRsp(struct soap *soap, const struct ns__setDeviceParamRsp *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setDeviceParamRsp);
	if (soap_out_ns__setDeviceParamRsp(soap, tag?tag:"ns:setDeviceParamRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setDeviceParamRsp * SOAP_FMAC4 soap_get_ns__setDeviceParamRsp(struct soap *soap, struct ns__setDeviceParamRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setDeviceParamRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setDeviceParamRsp * SOAP_FMAC2 soap_instantiate_ns__setDeviceParamRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setDeviceParamRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setDeviceParamRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__setDeviceParamRsp);
		if (size)
			*size = sizeof(struct ns__setDeviceParamRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__setDeviceParamRsp, n);
		if (size)
			*size = n * sizeof(struct ns__setDeviceParamRsp);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__setDeviceParamRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setDeviceParamRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setDeviceParamRsp %p -> %p\n", q, p));
	*(struct ns__setDeviceParamRsp*)p = *(struct ns__setDeviceParamRsp*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setDeviceParamReq(struct soap *soap, struct ns__setDeviceParamReq *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->macID);
	soap_default_Array24OfunsignedByte(soap, a->DeviceID);
	soap_default_unsignedByte(soap, &a->Opt_DeviceName);
	soap_default_unsignedByte(soap, &a->Opt_DeviceInfo);
	soap_default_Array32Ofbyte(soap, a->DeviceName);
	soap_default_Array64Ofbyte(soap, a->DeviceInfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setDeviceParamReq(struct soap *soap, const struct ns__setDeviceParamReq *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_Array24OfunsignedByte(soap, a->DeviceID);
	soap_embedded(soap, &a->Opt_DeviceName, SOAP_TYPE_unsignedByte);
	soap_embedded(soap, &a->Opt_DeviceInfo, SOAP_TYPE_unsignedByte);
	soap_serialize_Array32Ofbyte(soap, a->DeviceName);
	soap_serialize_Array64Ofbyte(soap, a->DeviceInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setDeviceParamReq(struct soap *soap, const char *tag, int id, const struct ns__setDeviceParamReq *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setDeviceParamReq), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "macID", -1, &a->macID, ""))
		return soap->error;
	soap_out_Array24OfunsignedByte(soap, "DeviceID", -1, a->DeviceID, "");
	if (soap_out_unsignedByte(soap, "Opt-DeviceName", -1, &a->Opt_DeviceName, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "Opt-DeviceInfo", -1, &a->Opt_DeviceInfo, ""))
		return soap->error;
	soap_out_Array32Ofbyte(soap, "DeviceName", -1, a->DeviceName, "");
	soap_out_Array64Ofbyte(soap, "DeviceInfo", -1, a->DeviceInfo, "");
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setDeviceParamReq * SOAP_FMAC4 soap_in_ns__setDeviceParamReq(struct soap *soap, const char *tag, struct ns__setDeviceParamReq *a, const char *type)
{
	size_t soap_flag_macID = 1;
	size_t soap_flag_DeviceID = 1;
	size_t soap_flag_Opt_DeviceName = 1;
	size_t soap_flag_Opt_DeviceInfo = 1;
	size_t soap_flag_DeviceName = 1;
	size_t soap_flag_DeviceInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setDeviceParamReq *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setDeviceParamReq, sizeof(struct ns__setDeviceParamReq), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setDeviceParamReq(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_macID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "macID", &a->macID, "xsd:unsignedInt"))
				{	soap_flag_macID--;
					continue;
				}
			if (soap_flag_DeviceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array24OfunsignedByte(soap, "DeviceID", a->DeviceID, "xsd:unsignedByte"))
				{	soap_flag_DeviceID--;
					continue;
				}
			if (soap_flag_Opt_DeviceName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "Opt-DeviceName", &a->Opt_DeviceName, "xsd:unsignedByte"))
				{	soap_flag_Opt_DeviceName--;
					continue;
				}
			if (soap_flag_Opt_DeviceInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "Opt-DeviceInfo", &a->Opt_DeviceInfo, "xsd:unsignedByte"))
				{	soap_flag_Opt_DeviceInfo--;
					continue;
				}
			if (soap_flag_DeviceName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array32Ofbyte(soap, "DeviceName", a->DeviceName, "xsd:byte"))
				{	soap_flag_DeviceName--;
					continue;
				}
			if (soap_flag_DeviceInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array64Ofbyte(soap, "DeviceInfo", a->DeviceInfo, "xsd:byte"))
				{	soap_flag_DeviceInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setDeviceParamReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setDeviceParamReq, 0, sizeof(struct ns__setDeviceParamReq), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_macID > 0 || soap_flag_DeviceID > 0 || soap_flag_Opt_DeviceName > 0 || soap_flag_Opt_DeviceInfo > 0 || soap_flag_DeviceName > 0 || soap_flag_DeviceInfo > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setDeviceParamReq(struct soap *soap, const struct ns__setDeviceParamReq *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setDeviceParamReq);
	if (soap_out_ns__setDeviceParamReq(soap, tag?tag:"ns:setDeviceParamReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setDeviceParamReq * SOAP_FMAC4 soap_get_ns__setDeviceParamReq(struct soap *soap, struct ns__setDeviceParamReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setDeviceParamReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setDeviceParamReq * SOAP_FMAC2 soap_instantiate_ns__setDeviceParamReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setDeviceParamReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setDeviceParamReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__setDeviceParamReq);
		if (size)
			*size = sizeof(struct ns__setDeviceParamReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__setDeviceParamReq, n);
		if (size)
			*size = n * sizeof(struct ns__setDeviceParamReq);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__setDeviceParamReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setDeviceParamReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setDeviceParamReq %p -> %p\n", q, p));
	*(struct ns__setDeviceParamReq*)p = *(struct ns__setDeviceParamReq*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDeviceParamRsp(struct soap *soap, struct ns__GetDeviceParamRsp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__ErrMessage(soap, &a->retCode);
	soap_default_unsignedByte(soap, &a->DoneCode);
	soap_default_Array24OfunsignedByte(soap, a->DeviceID);
	soap_default_unsignedByte(soap, &a->Opt_DeviceName);
	soap_default_unsignedByte(soap, &a->Opt_DeviceInfo);
	soap_default_unsignedByte(soap, &a->Opt_DALStatus);
	soap_default_Array32Ofbyte(soap, a->DeviceName);
	soap_default_Array64Ofbyte(soap, a->DeviceInfo);
	soap_default_ns__DeviceDAL(soap, &a->DAL);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDeviceParamRsp(struct soap *soap, const struct ns__GetDeviceParamRsp *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->DoneCode, SOAP_TYPE_unsignedByte);
	soap_serialize_Array24OfunsignedByte(soap, a->DeviceID);
	soap_embedded(soap, &a->Opt_DeviceName, SOAP_TYPE_unsignedByte);
	soap_embedded(soap, &a->Opt_DeviceInfo, SOAP_TYPE_unsignedByte);
	soap_embedded(soap, &a->Opt_DALStatus, SOAP_TYPE_unsignedByte);
	soap_serialize_Array32Ofbyte(soap, a->DeviceName);
	soap_serialize_Array64Ofbyte(soap, a->DeviceInfo);
	soap_serialize_ns__DeviceDAL(soap, &a->DAL);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDeviceParamRsp(struct soap *soap, const char *tag, int id, const struct ns__GetDeviceParamRsp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__GetDeviceParamRsp), type))
		return soap->error;
	if (soap_out_ns__ErrMessage(soap, "retCode", -1, &a->retCode, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "DoneCode", -1, &a->DoneCode, ""))
		return soap->error;
	soap_out_Array24OfunsignedByte(soap, "DeviceID", -1, a->DeviceID, "");
	if (soap_out_unsignedByte(soap, "Opt-DeviceName", -1, &a->Opt_DeviceName, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "Opt-DeviceInfo", -1, &a->Opt_DeviceInfo, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "Opt-DALStatus", -1, &a->Opt_DALStatus, ""))
		return soap->error;
	soap_out_Array32Ofbyte(soap, "DeviceName", -1, a->DeviceName, "");
	soap_out_Array64Ofbyte(soap, "DeviceInfo", -1, a->DeviceInfo, "");
	if (soap_out_ns__DeviceDAL(soap, "DAL", -1, &a->DAL, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__GetDeviceParamRsp * SOAP_FMAC4 soap_in_ns__GetDeviceParamRsp(struct soap *soap, const char *tag, struct ns__GetDeviceParamRsp *a, const char *type)
{
	size_t soap_flag_retCode = 1;
	size_t soap_flag_DoneCode = 1;
	size_t soap_flag_DeviceID = 1;
	size_t soap_flag_Opt_DeviceName = 1;
	size_t soap_flag_Opt_DeviceInfo = 1;
	size_t soap_flag_Opt_DALStatus = 1;
	size_t soap_flag_DeviceName = 1;
	size_t soap_flag_DeviceInfo = 1;
	size_t soap_flag_DAL = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__GetDeviceParamRsp *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__GetDeviceParamRsp, sizeof(struct ns__GetDeviceParamRsp), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__GetDeviceParamRsp(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_retCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__ErrMessage(soap, "retCode", &a->retCode, "ns:ErrMessage"))
				{	soap_flag_retCode--;
					continue;
				}
			if (soap_flag_DoneCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "DoneCode", &a->DoneCode, "xsd:unsignedByte"))
				{	soap_flag_DoneCode--;
					continue;
				}
			if (soap_flag_DeviceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array24OfunsignedByte(soap, "DeviceID", a->DeviceID, "xsd:unsignedByte"))
				{	soap_flag_DeviceID--;
					continue;
				}
			if (soap_flag_Opt_DeviceName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "Opt-DeviceName", &a->Opt_DeviceName, "xsd:unsignedByte"))
				{	soap_flag_Opt_DeviceName--;
					continue;
				}
			if (soap_flag_Opt_DeviceInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "Opt-DeviceInfo", &a->Opt_DeviceInfo, "xsd:unsignedByte"))
				{	soap_flag_Opt_DeviceInfo--;
					continue;
				}
			if (soap_flag_Opt_DALStatus && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "Opt-DALStatus", &a->Opt_DALStatus, "xsd:unsignedByte"))
				{	soap_flag_Opt_DALStatus--;
					continue;
				}
			if (soap_flag_DeviceName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array32Ofbyte(soap, "DeviceName", a->DeviceName, "xsd:byte"))
				{	soap_flag_DeviceName--;
					continue;
				}
			if (soap_flag_DeviceInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array64Ofbyte(soap, "DeviceInfo", a->DeviceInfo, "xsd:byte"))
				{	soap_flag_DeviceInfo--;
					continue;
				}
			if (soap_flag_DAL && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__DeviceDAL(soap, "DAL", &a->DAL, "ns:DeviceDAL"))
				{	soap_flag_DAL--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__GetDeviceParamRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__GetDeviceParamRsp, 0, sizeof(struct ns__GetDeviceParamRsp), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_retCode > 0 || soap_flag_DoneCode > 0 || soap_flag_DeviceID > 0 || soap_flag_Opt_DeviceName > 0 || soap_flag_Opt_DeviceInfo > 0 || soap_flag_Opt_DALStatus > 0 || soap_flag_DeviceName > 0 || soap_flag_DeviceInfo > 0 || soap_flag_DAL > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDeviceParamRsp(struct soap *soap, const struct ns__GetDeviceParamRsp *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__GetDeviceParamRsp);
	if (soap_out_ns__GetDeviceParamRsp(soap, tag?tag:"ns:GetDeviceParamRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetDeviceParamRsp * SOAP_FMAC4 soap_get_ns__GetDeviceParamRsp(struct soap *soap, struct ns__GetDeviceParamRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GetDeviceParamRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__GetDeviceParamRsp * SOAP_FMAC2 soap_instantiate_ns__GetDeviceParamRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GetDeviceParamRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__GetDeviceParamRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__GetDeviceParamRsp);
		if (size)
			*size = sizeof(struct ns__GetDeviceParamRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__GetDeviceParamRsp, n);
		if (size)
			*size = n * sizeof(struct ns__GetDeviceParamRsp);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__GetDeviceParamRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetDeviceParamRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__GetDeviceParamRsp %p -> %p\n", q, p));
	*(struct ns__GetDeviceParamRsp*)p = *(struct ns__GetDeviceParamRsp*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DeviceDAL(struct soap *soap, struct ns__DeviceDAL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DeviceDAL(struct soap *soap, const struct ns__DeviceDAL *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	if (a->__ptr)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_serialize_PointerTounsignedByte(soap, a->__ptr + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceDAL(struct soap *soap, const char *tag, int id, const struct ns__DeviceDAL *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__DeviceDAL), type))
		return soap->error;
	if (a->__ptr)
	{	int i;
		for (i = 0; i < a->__size; i++)
			if (soap_out_PointerTounsignedByte(soap, "item", -1, a->__ptr + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__DeviceDAL * SOAP_FMAC4 soap_in_ns__DeviceDAL(struct soap *soap, const char *tag, struct ns__DeviceDAL *a, const char *type)
{
	struct soap_blist *soap_blist___ptr = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__DeviceDAL *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__DeviceDAL, sizeof(struct ns__DeviceDAL), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__DeviceDAL(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->__ptr == NULL)
				{	if (soap_blist___ptr == NULL)
						soap_blist___ptr = soap_new_block(soap);
					a->__ptr = (unsigned char **)soap_push_block(soap, soap_blist___ptr, sizeof(unsigned char *));
					if (a->__ptr == NULL)
						return NULL;
					*a->__ptr = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTounsignedByte(soap, "item", a->__ptr, "xsd:unsignedByte"))
				{	a->__size++;
					a->__ptr = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__ptr)
			soap_pop_block(soap, soap_blist___ptr);
		if (a->__size)
			a->__ptr = (unsigned char **)soap_save_block(soap, soap_blist___ptr, NULL, 1);
		else
		{	a->__ptr = NULL;
			if (soap_blist___ptr)
				soap_end_block(soap, soap_blist___ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__DeviceDAL *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__DeviceDAL, 0, sizeof(struct ns__DeviceDAL), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeviceDAL(struct soap *soap, const struct ns__DeviceDAL *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__DeviceDAL);
	if (soap_out_ns__DeviceDAL(soap, tag?tag:"ns:DeviceDAL", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DeviceDAL * SOAP_FMAC4 soap_get_ns__DeviceDAL(struct soap *soap, struct ns__DeviceDAL *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DeviceDAL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__DeviceDAL * SOAP_FMAC2 soap_instantiate_ns__DeviceDAL(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DeviceDAL(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__DeviceDAL, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DeviceDAL);
		if (size)
			*size = sizeof(struct ns__DeviceDAL);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__DeviceDAL, n);
		if (size)
			*size = n * sizeof(struct ns__DeviceDAL);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__DeviceDAL*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DeviceDAL(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__DeviceDAL %p -> %p\n", q, p));
	*(struct ns__DeviceDAL*)p = *(struct ns__DeviceDAL*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDeviceParamReq(struct soap *soap, struct ns__GetDeviceParamReq *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->macID);
	soap_default_Array24OfunsignedByte(soap, a->DeviceID);
	soap_default_unsignedByte(soap, &a->Opt_DeviceName);
	soap_default_unsignedByte(soap, &a->Opt_DeviceInfo);
	soap_default_unsignedByte(soap, &a->Opt_DALStatus);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDeviceParamReq(struct soap *soap, const struct ns__GetDeviceParamReq *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_Array24OfunsignedByte(soap, a->DeviceID);
	soap_embedded(soap, &a->Opt_DeviceName, SOAP_TYPE_unsignedByte);
	soap_embedded(soap, &a->Opt_DeviceInfo, SOAP_TYPE_unsignedByte);
	soap_embedded(soap, &a->Opt_DALStatus, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDeviceParamReq(struct soap *soap, const char *tag, int id, const struct ns__GetDeviceParamReq *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__GetDeviceParamReq), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "macID", -1, &a->macID, ""))
		return soap->error;
	soap_out_Array24OfunsignedByte(soap, "DeviceID", -1, a->DeviceID, "");
	if (soap_out_unsignedByte(soap, "Opt-DeviceName", -1, &a->Opt_DeviceName, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "Opt-DeviceInfo", -1, &a->Opt_DeviceInfo, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "Opt-DALStatus", -1, &a->Opt_DALStatus, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__GetDeviceParamReq * SOAP_FMAC4 soap_in_ns__GetDeviceParamReq(struct soap *soap, const char *tag, struct ns__GetDeviceParamReq *a, const char *type)
{
	size_t soap_flag_macID = 1;
	size_t soap_flag_DeviceID = 1;
	size_t soap_flag_Opt_DeviceName = 1;
	size_t soap_flag_Opt_DeviceInfo = 1;
	size_t soap_flag_Opt_DALStatus = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__GetDeviceParamReq *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__GetDeviceParamReq, sizeof(struct ns__GetDeviceParamReq), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__GetDeviceParamReq(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_macID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "macID", &a->macID, "xsd:unsignedInt"))
				{	soap_flag_macID--;
					continue;
				}
			if (soap_flag_DeviceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array24OfunsignedByte(soap, "DeviceID", a->DeviceID, "xsd:unsignedByte"))
				{	soap_flag_DeviceID--;
					continue;
				}
			if (soap_flag_Opt_DeviceName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "Opt-DeviceName", &a->Opt_DeviceName, "xsd:unsignedByte"))
				{	soap_flag_Opt_DeviceName--;
					continue;
				}
			if (soap_flag_Opt_DeviceInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "Opt-DeviceInfo", &a->Opt_DeviceInfo, "xsd:unsignedByte"))
				{	soap_flag_Opt_DeviceInfo--;
					continue;
				}
			if (soap_flag_Opt_DALStatus && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "Opt-DALStatus", &a->Opt_DALStatus, "xsd:unsignedByte"))
				{	soap_flag_Opt_DALStatus--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__GetDeviceParamReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__GetDeviceParamReq, 0, sizeof(struct ns__GetDeviceParamReq), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_macID > 0 || soap_flag_DeviceID > 0 || soap_flag_Opt_DeviceName > 0 || soap_flag_Opt_DeviceInfo > 0 || soap_flag_Opt_DALStatus > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDeviceParamReq(struct soap *soap, const struct ns__GetDeviceParamReq *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__GetDeviceParamReq);
	if (soap_out_ns__GetDeviceParamReq(soap, tag?tag:"ns:GetDeviceParamReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetDeviceParamReq * SOAP_FMAC4 soap_get_ns__GetDeviceParamReq(struct soap *soap, struct ns__GetDeviceParamReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GetDeviceParamReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__GetDeviceParamReq * SOAP_FMAC2 soap_instantiate_ns__GetDeviceParamReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GetDeviceParamReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__GetDeviceParamReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__GetDeviceParamReq);
		if (size)
			*size = sizeof(struct ns__GetDeviceParamReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__GetDeviceParamReq, n);
		if (size)
			*size = n * sizeof(struct ns__GetDeviceParamReq);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__GetDeviceParamReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetDeviceParamReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__GetDeviceParamReq %p -> %p\n", q, p));
	*(struct ns__GetDeviceParamReq*)p = *(struct ns__GetDeviceParamReq*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDeviceListRsp(struct soap *soap, struct ns__GetDeviceListRsp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__ErrMessage(soap, &a->retCode);
	soap_default_unsignedByte(soap, &a->DoneCode);
	soap_default_unsignedShort(soap, &a->nDevCount);
	soap_default_ns__DeviceNodeArray(soap, &a->array);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDeviceListRsp(struct soap *soap, const struct ns__GetDeviceListRsp *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->DoneCode, SOAP_TYPE_unsignedByte);
	soap_serialize_ns__DeviceNodeArray(soap, &a->array);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDeviceListRsp(struct soap *soap, const char *tag, int id, const struct ns__GetDeviceListRsp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__GetDeviceListRsp), type))
		return soap->error;
	if (soap_out_ns__ErrMessage(soap, "retCode", -1, &a->retCode, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "DoneCode", -1, &a->DoneCode, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "nDevCount", -1, &a->nDevCount, ""))
		return soap->error;
	if (soap_out_ns__DeviceNodeArray(soap, "array", -1, &a->array, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__GetDeviceListRsp * SOAP_FMAC4 soap_in_ns__GetDeviceListRsp(struct soap *soap, const char *tag, struct ns__GetDeviceListRsp *a, const char *type)
{
	size_t soap_flag_retCode = 1;
	size_t soap_flag_DoneCode = 1;
	size_t soap_flag_nDevCount = 1;
	size_t soap_flag_array = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__GetDeviceListRsp *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__GetDeviceListRsp, sizeof(struct ns__GetDeviceListRsp), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__GetDeviceListRsp(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_retCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__ErrMessage(soap, "retCode", &a->retCode, "ns:ErrMessage"))
				{	soap_flag_retCode--;
					continue;
				}
			if (soap_flag_DoneCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "DoneCode", &a->DoneCode, "xsd:unsignedByte"))
				{	soap_flag_DoneCode--;
					continue;
				}
			if (soap_flag_nDevCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "nDevCount", &a->nDevCount, "xsd:unsignedShort"))
				{	soap_flag_nDevCount--;
					continue;
				}
			if (soap_flag_array && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__DeviceNodeArray(soap, "array", &a->array, "ns:DeviceNodeArray"))
				{	soap_flag_array--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__GetDeviceListRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__GetDeviceListRsp, 0, sizeof(struct ns__GetDeviceListRsp), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_retCode > 0 || soap_flag_DoneCode > 0 || soap_flag_nDevCount > 0 || soap_flag_array > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDeviceListRsp(struct soap *soap, const struct ns__GetDeviceListRsp *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__GetDeviceListRsp);
	if (soap_out_ns__GetDeviceListRsp(soap, tag?tag:"ns:GetDeviceListRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetDeviceListRsp * SOAP_FMAC4 soap_get_ns__GetDeviceListRsp(struct soap *soap, struct ns__GetDeviceListRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GetDeviceListRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__GetDeviceListRsp * SOAP_FMAC2 soap_instantiate_ns__GetDeviceListRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GetDeviceListRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__GetDeviceListRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__GetDeviceListRsp);
		if (size)
			*size = sizeof(struct ns__GetDeviceListRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__GetDeviceListRsp, n);
		if (size)
			*size = n * sizeof(struct ns__GetDeviceListRsp);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__GetDeviceListRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetDeviceListRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__GetDeviceListRsp %p -> %p\n", q, p));
	*(struct ns__GetDeviceListRsp*)p = *(struct ns__GetDeviceListRsp*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DeviceNodeArray(struct soap *soap, struct ns__DeviceNodeArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DeviceNodeArray(struct soap *soap, const struct ns__DeviceNodeArray *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	if (a->__ptr)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_serialize_PointerTons__stCall_DeviceNode(soap, a->__ptr + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceNodeArray(struct soap *soap, const char *tag, int id, const struct ns__DeviceNodeArray *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__DeviceNodeArray), type))
		return soap->error;
	if (a->__ptr)
	{	int i;
		for (i = 0; i < a->__size; i++)
			if (soap_out_PointerTons__stCall_DeviceNode(soap, "item", -1, a->__ptr + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__DeviceNodeArray * SOAP_FMAC4 soap_in_ns__DeviceNodeArray(struct soap *soap, const char *tag, struct ns__DeviceNodeArray *a, const char *type)
{
	struct soap_blist *soap_blist___ptr = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__DeviceNodeArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__DeviceNodeArray, sizeof(struct ns__DeviceNodeArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__DeviceNodeArray(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->__ptr == NULL)
				{	if (soap_blist___ptr == NULL)
						soap_blist___ptr = soap_new_block(soap);
					a->__ptr = (struct ns__stCall_DeviceNode **)soap_push_block(soap, soap_blist___ptr, sizeof(struct ns__stCall_DeviceNode *));
					if (a->__ptr == NULL)
						return NULL;
					*a->__ptr = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons__stCall_DeviceNode(soap, "item", a->__ptr, "ns:stCall-DeviceNode"))
				{	a->__size++;
					a->__ptr = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__ptr)
			soap_pop_block(soap, soap_blist___ptr);
		if (a->__size)
			a->__ptr = (struct ns__stCall_DeviceNode **)soap_save_block(soap, soap_blist___ptr, NULL, 1);
		else
		{	a->__ptr = NULL;
			if (soap_blist___ptr)
				soap_end_block(soap, soap_blist___ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__DeviceNodeArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__DeviceNodeArray, 0, sizeof(struct ns__DeviceNodeArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeviceNodeArray(struct soap *soap, const struct ns__DeviceNodeArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__DeviceNodeArray);
	if (soap_out_ns__DeviceNodeArray(soap, tag?tag:"ns:DeviceNodeArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DeviceNodeArray * SOAP_FMAC4 soap_get_ns__DeviceNodeArray(struct soap *soap, struct ns__DeviceNodeArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DeviceNodeArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__DeviceNodeArray * SOAP_FMAC2 soap_instantiate_ns__DeviceNodeArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DeviceNodeArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__DeviceNodeArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__DeviceNodeArray);
		if (size)
			*size = sizeof(struct ns__DeviceNodeArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__DeviceNodeArray, n);
		if (size)
			*size = n * sizeof(struct ns__DeviceNodeArray);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__DeviceNodeArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DeviceNodeArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__DeviceNodeArray %p -> %p\n", q, p));
	*(struct ns__DeviceNodeArray*)p = *(struct ns__DeviceNodeArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__stCall_DeviceNode(struct soap *soap, struct ns__stCall_DeviceNode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_Array32Ofbyte(soap, a->DeviceName);
	soap_default_Array64Ofbyte(soap, a->No);
	soap_default_Array24OfunsignedByte(soap, a->DeviceID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__stCall_DeviceNode(struct soap *soap, const struct ns__stCall_DeviceNode *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_Array32Ofbyte(soap, a->DeviceName);
	soap_serialize_Array64Ofbyte(soap, a->No);
	soap_serialize_Array24OfunsignedByte(soap, a->DeviceID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__stCall_DeviceNode(struct soap *soap, const char *tag, int id, const struct ns__stCall_DeviceNode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__stCall_DeviceNode), type))
		return soap->error;
	soap_out_Array32Ofbyte(soap, "DeviceName", -1, a->DeviceName, "");
	soap_out_Array64Ofbyte(soap, "No", -1, a->No, "");
	soap_out_Array24OfunsignedByte(soap, "DeviceID", -1, a->DeviceID, "");
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__stCall_DeviceNode * SOAP_FMAC4 soap_in_ns__stCall_DeviceNode(struct soap *soap, const char *tag, struct ns__stCall_DeviceNode *a, const char *type)
{
	size_t soap_flag_DeviceName = 1;
	size_t soap_flag_No = 1;
	size_t soap_flag_DeviceID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__stCall_DeviceNode *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__stCall_DeviceNode, sizeof(struct ns__stCall_DeviceNode), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__stCall_DeviceNode(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeviceName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array32Ofbyte(soap, "DeviceName", a->DeviceName, "xsd:byte"))
				{	soap_flag_DeviceName--;
					continue;
				}
			if (soap_flag_No && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array64Ofbyte(soap, "No", a->No, "xsd:byte"))
				{	soap_flag_No--;
					continue;
				}
			if (soap_flag_DeviceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array24OfunsignedByte(soap, "DeviceID", a->DeviceID, "xsd:unsignedByte"))
				{	soap_flag_DeviceID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__stCall_DeviceNode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__stCall_DeviceNode, 0, sizeof(struct ns__stCall_DeviceNode), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeviceName > 0 || soap_flag_No > 0 || soap_flag_DeviceID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__stCall_DeviceNode(struct soap *soap, const struct ns__stCall_DeviceNode *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__stCall_DeviceNode);
	if (soap_out_ns__stCall_DeviceNode(soap, tag?tag:"ns:stCall-DeviceNode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__stCall_DeviceNode * SOAP_FMAC4 soap_get_ns__stCall_DeviceNode(struct soap *soap, struct ns__stCall_DeviceNode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__stCall_DeviceNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__stCall_DeviceNode * SOAP_FMAC2 soap_instantiate_ns__stCall_DeviceNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__stCall_DeviceNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__stCall_DeviceNode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__stCall_DeviceNode);
		if (size)
			*size = sizeof(struct ns__stCall_DeviceNode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__stCall_DeviceNode, n);
		if (size)
			*size = n * sizeof(struct ns__stCall_DeviceNode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__stCall_DeviceNode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__stCall_DeviceNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__stCall_DeviceNode %p -> %p\n", q, p));
	*(struct ns__stCall_DeviceNode*)p = *(struct ns__stCall_DeviceNode*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDeviceListReq(struct soap *soap, struct ns__GetDeviceListReq *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->macID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDeviceListReq(struct soap *soap, const struct ns__GetDeviceListReq *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDeviceListReq(struct soap *soap, const char *tag, int id, const struct ns__GetDeviceListReq *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__GetDeviceListReq), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "macID", -1, &a->macID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__GetDeviceListReq * SOAP_FMAC4 soap_in_ns__GetDeviceListReq(struct soap *soap, const char *tag, struct ns__GetDeviceListReq *a, const char *type)
{
	size_t soap_flag_macID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__GetDeviceListReq *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__GetDeviceListReq, sizeof(struct ns__GetDeviceListReq), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__GetDeviceListReq(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_macID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "macID", &a->macID, "xsd:unsignedInt"))
				{	soap_flag_macID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__GetDeviceListReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__GetDeviceListReq, 0, sizeof(struct ns__GetDeviceListReq), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_macID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDeviceListReq(struct soap *soap, const struct ns__GetDeviceListReq *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__GetDeviceListReq);
	if (soap_out_ns__GetDeviceListReq(soap, tag?tag:"ns:GetDeviceListReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetDeviceListReq * SOAP_FMAC4 soap_get_ns__GetDeviceListReq(struct soap *soap, struct ns__GetDeviceListReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GetDeviceListReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__GetDeviceListReq * SOAP_FMAC2 soap_instantiate_ns__GetDeviceListReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GetDeviceListReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__GetDeviceListReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__GetDeviceListReq);
		if (size)
			*size = sizeof(struct ns__GetDeviceListReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__GetDeviceListReq, n);
		if (size)
			*size = n * sizeof(struct ns__GetDeviceListReq);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__GetDeviceListReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetDeviceListReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__GetDeviceListReq %p -> %p\n", q, p));
	*(struct ns__GetDeviceListReq*)p = *(struct ns__GetDeviceListReq*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__RemoveDeviceRsp(struct soap *soap, struct ns__RemoveDeviceRsp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__ErrMessage(soap, &a->retCode);
	soap_default_unsignedByte(soap, &a->DoneCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__RemoveDeviceRsp(struct soap *soap, const struct ns__RemoveDeviceRsp *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->DoneCode, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__RemoveDeviceRsp(struct soap *soap, const char *tag, int id, const struct ns__RemoveDeviceRsp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__RemoveDeviceRsp), type))
		return soap->error;
	if (soap_out_ns__ErrMessage(soap, "retCode", -1, &a->retCode, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "DoneCode", -1, &a->DoneCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__RemoveDeviceRsp * SOAP_FMAC4 soap_in_ns__RemoveDeviceRsp(struct soap *soap, const char *tag, struct ns__RemoveDeviceRsp *a, const char *type)
{
	size_t soap_flag_retCode = 1;
	size_t soap_flag_DoneCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__RemoveDeviceRsp *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__RemoveDeviceRsp, sizeof(struct ns__RemoveDeviceRsp), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__RemoveDeviceRsp(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_retCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__ErrMessage(soap, "retCode", &a->retCode, "ns:ErrMessage"))
				{	soap_flag_retCode--;
					continue;
				}
			if (soap_flag_DoneCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "DoneCode", &a->DoneCode, "xsd:unsignedByte"))
				{	soap_flag_DoneCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__RemoveDeviceRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__RemoveDeviceRsp, 0, sizeof(struct ns__RemoveDeviceRsp), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_retCode > 0 || soap_flag_DoneCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__RemoveDeviceRsp(struct soap *soap, const struct ns__RemoveDeviceRsp *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__RemoveDeviceRsp);
	if (soap_out_ns__RemoveDeviceRsp(soap, tag?tag:"ns:RemoveDeviceRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__RemoveDeviceRsp * SOAP_FMAC4 soap_get_ns__RemoveDeviceRsp(struct soap *soap, struct ns__RemoveDeviceRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__RemoveDeviceRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__RemoveDeviceRsp * SOAP_FMAC2 soap_instantiate_ns__RemoveDeviceRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__RemoveDeviceRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__RemoveDeviceRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__RemoveDeviceRsp);
		if (size)
			*size = sizeof(struct ns__RemoveDeviceRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__RemoveDeviceRsp, n);
		if (size)
			*size = n * sizeof(struct ns__RemoveDeviceRsp);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__RemoveDeviceRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__RemoveDeviceRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__RemoveDeviceRsp %p -> %p\n", q, p));
	*(struct ns__RemoveDeviceRsp*)p = *(struct ns__RemoveDeviceRsp*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__RemoveDeviceReq(struct soap *soap, struct ns__RemoveDeviceReq *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->macID);
	soap_default_Array24OfunsignedByte(soap, a->DeviceID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__RemoveDeviceReq(struct soap *soap, const struct ns__RemoveDeviceReq *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_Array24OfunsignedByte(soap, a->DeviceID);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__RemoveDeviceReq(struct soap *soap, const char *tag, int id, const struct ns__RemoveDeviceReq *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__RemoveDeviceReq), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "macID", -1, &a->macID, ""))
		return soap->error;
	soap_out_Array24OfunsignedByte(soap, "DeviceID", -1, a->DeviceID, "");
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__RemoveDeviceReq * SOAP_FMAC4 soap_in_ns__RemoveDeviceReq(struct soap *soap, const char *tag, struct ns__RemoveDeviceReq *a, const char *type)
{
	size_t soap_flag_macID = 1;
	size_t soap_flag_DeviceID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__RemoveDeviceReq *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__RemoveDeviceReq, sizeof(struct ns__RemoveDeviceReq), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__RemoveDeviceReq(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_macID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "macID", &a->macID, "xsd:unsignedInt"))
				{	soap_flag_macID--;
					continue;
				}
			if (soap_flag_DeviceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array24OfunsignedByte(soap, "DeviceID", a->DeviceID, "xsd:unsignedByte"))
				{	soap_flag_DeviceID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__RemoveDeviceReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__RemoveDeviceReq, 0, sizeof(struct ns__RemoveDeviceReq), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_macID > 0 || soap_flag_DeviceID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__RemoveDeviceReq(struct soap *soap, const struct ns__RemoveDeviceReq *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__RemoveDeviceReq);
	if (soap_out_ns__RemoveDeviceReq(soap, tag?tag:"ns:RemoveDeviceReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__RemoveDeviceReq * SOAP_FMAC4 soap_get_ns__RemoveDeviceReq(struct soap *soap, struct ns__RemoveDeviceReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__RemoveDeviceReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__RemoveDeviceReq * SOAP_FMAC2 soap_instantiate_ns__RemoveDeviceReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__RemoveDeviceReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__RemoveDeviceReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__RemoveDeviceReq);
		if (size)
			*size = sizeof(struct ns__RemoveDeviceReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__RemoveDeviceReq, n);
		if (size)
			*size = n * sizeof(struct ns__RemoveDeviceReq);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__RemoveDeviceReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__RemoveDeviceReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__RemoveDeviceReq %p -> %p\n", q, p));
	*(struct ns__RemoveDeviceReq*)p = *(struct ns__RemoveDeviceReq*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetHostDetailsRsp(struct soap *soap, struct ns__SetHostDetailsRsp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__ErrMessage(soap, &a->retCode);
	soap_default_unsignedByte(soap, &a->DoneCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetHostDetailsRsp(struct soap *soap, const struct ns__SetHostDetailsRsp *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->DoneCode, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetHostDetailsRsp(struct soap *soap, const char *tag, int id, const struct ns__SetHostDetailsRsp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SetHostDetailsRsp), type))
		return soap->error;
	if (soap_out_ns__ErrMessage(soap, "retCode", -1, &a->retCode, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "DoneCode", -1, &a->DoneCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__SetHostDetailsRsp * SOAP_FMAC4 soap_in_ns__SetHostDetailsRsp(struct soap *soap, const char *tag, struct ns__SetHostDetailsRsp *a, const char *type)
{
	size_t soap_flag_retCode = 1;
	size_t soap_flag_DoneCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__SetHostDetailsRsp *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SetHostDetailsRsp, sizeof(struct ns__SetHostDetailsRsp), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__SetHostDetailsRsp(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_retCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__ErrMessage(soap, "retCode", &a->retCode, "ns:ErrMessage"))
				{	soap_flag_retCode--;
					continue;
				}
			if (soap_flag_DoneCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "DoneCode", &a->DoneCode, "xsd:unsignedByte"))
				{	soap_flag_DoneCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__SetHostDetailsRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SetHostDetailsRsp, 0, sizeof(struct ns__SetHostDetailsRsp), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_retCode > 0 || soap_flag_DoneCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetHostDetailsRsp(struct soap *soap, const struct ns__SetHostDetailsRsp *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__SetHostDetailsRsp);
	if (soap_out_ns__SetHostDetailsRsp(soap, tag?tag:"ns:SetHostDetailsRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__SetHostDetailsRsp * SOAP_FMAC4 soap_get_ns__SetHostDetailsRsp(struct soap *soap, struct ns__SetHostDetailsRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SetHostDetailsRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__SetHostDetailsRsp * SOAP_FMAC2 soap_instantiate_ns__SetHostDetailsRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__SetHostDetailsRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__SetHostDetailsRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__SetHostDetailsRsp);
		if (size)
			*size = sizeof(struct ns__SetHostDetailsRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__SetHostDetailsRsp, n);
		if (size)
			*size = n * sizeof(struct ns__SetHostDetailsRsp);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__SetHostDetailsRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__SetHostDetailsRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__SetHostDetailsRsp %p -> %p\n", q, p));
	*(struct ns__SetHostDetailsRsp*)p = *(struct ns__SetHostDetailsRsp*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetHostDetailsReq(struct soap *soap, struct ns__SetHostDetailsReq *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->macID);
	soap_default_Array64Ofbyte(soap, a->HostName);
	soap_default_Array64Ofbyte(soap, a->HostInfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetHostDetailsReq(struct soap *soap, const struct ns__SetHostDetailsReq *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_Array64Ofbyte(soap, a->HostName);
	soap_serialize_Array64Ofbyte(soap, a->HostInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetHostDetailsReq(struct soap *soap, const char *tag, int id, const struct ns__SetHostDetailsReq *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SetHostDetailsReq), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "macID", -1, &a->macID, ""))
		return soap->error;
	soap_out_Array64Ofbyte(soap, "HostName", -1, a->HostName, "");
	soap_out_Array64Ofbyte(soap, "HostInfo", -1, a->HostInfo, "");
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__SetHostDetailsReq * SOAP_FMAC4 soap_in_ns__SetHostDetailsReq(struct soap *soap, const char *tag, struct ns__SetHostDetailsReq *a, const char *type)
{
	size_t soap_flag_macID = 1;
	size_t soap_flag_HostName = 1;
	size_t soap_flag_HostInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__SetHostDetailsReq *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SetHostDetailsReq, sizeof(struct ns__SetHostDetailsReq), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__SetHostDetailsReq(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_macID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "macID", &a->macID, "xsd:unsignedInt"))
				{	soap_flag_macID--;
					continue;
				}
			if (soap_flag_HostName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array64Ofbyte(soap, "HostName", a->HostName, "xsd:byte"))
				{	soap_flag_HostName--;
					continue;
				}
			if (soap_flag_HostInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array64Ofbyte(soap, "HostInfo", a->HostInfo, "xsd:byte"))
				{	soap_flag_HostInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__SetHostDetailsReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SetHostDetailsReq, 0, sizeof(struct ns__SetHostDetailsReq), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_macID > 0 || soap_flag_HostName > 0 || soap_flag_HostInfo > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetHostDetailsReq(struct soap *soap, const struct ns__SetHostDetailsReq *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__SetHostDetailsReq);
	if (soap_out_ns__SetHostDetailsReq(soap, tag?tag:"ns:SetHostDetailsReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__SetHostDetailsReq * SOAP_FMAC4 soap_get_ns__SetHostDetailsReq(struct soap *soap, struct ns__SetHostDetailsReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SetHostDetailsReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__SetHostDetailsReq * SOAP_FMAC2 soap_instantiate_ns__SetHostDetailsReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__SetHostDetailsReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__SetHostDetailsReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__SetHostDetailsReq);
		if (size)
			*size = sizeof(struct ns__SetHostDetailsReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__SetHostDetailsReq, n);
		if (size)
			*size = n * sizeof(struct ns__SetHostDetailsReq);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__SetHostDetailsReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__SetHostDetailsReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__SetHostDetailsReq %p -> %p\n", q, p));
	*(struct ns__SetHostDetailsReq*)p = *(struct ns__SetHostDetailsReq*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetHostDetailsRsp(struct soap *soap, struct ns__GetHostDetailsRsp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__ErrMessage(soap, &a->retCode);
	soap_default_unsignedByte(soap, &a->DoneCode);
	soap_default_unsignedShort(soap, &a->HostType);
	soap_default_unsignedShort(soap, &a->FirmwareVersion);
	soap_default_Array64Ofbyte(soap, a->HostName);
	soap_default_Array64Ofbyte(soap, a->HostInfo);
	soap_default_unsignedByte(soap, &a->ConnetType);
	soap_default_Array8OfunsignedByte(soap, a->IEEEAdd);
	soap_default_unsignedByte(soap, &a->IEEEAdd_Flag);
	soap_default_Array2OfunsignedByte(soap, a->PANID);
	soap_default_unsignedByte(soap, &a->PANID_Flag);
	soap_default_Array8OfunsignedByte(soap, a->EPANID);
	soap_default_unsignedByte(soap, &a->EPANID_Flag);
	soap_default_unsignedShort(soap, &a->SensorNum);
	soap_default_unsignedShort(soap, &a->RelayNum);
	soap_default_unsignedShort(soap, &a->ANSensorNum);
	soap_default_unsignedShort(soap, &a->ANRelayNum);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetHostDetailsRsp(struct soap *soap, const struct ns__GetHostDetailsRsp *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->DoneCode, SOAP_TYPE_unsignedByte);
	soap_serialize_Array64Ofbyte(soap, a->HostName);
	soap_serialize_Array64Ofbyte(soap, a->HostInfo);
	soap_embedded(soap, &a->ConnetType, SOAP_TYPE_unsignedByte);
	soap_serialize_Array8OfunsignedByte(soap, a->IEEEAdd);
	soap_embedded(soap, &a->IEEEAdd_Flag, SOAP_TYPE_unsignedByte);
	soap_serialize_Array2OfunsignedByte(soap, a->PANID);
	soap_embedded(soap, &a->PANID_Flag, SOAP_TYPE_unsignedByte);
	soap_serialize_Array8OfunsignedByte(soap, a->EPANID);
	soap_embedded(soap, &a->EPANID_Flag, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetHostDetailsRsp(struct soap *soap, const char *tag, int id, const struct ns__GetHostDetailsRsp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__GetHostDetailsRsp), type))
		return soap->error;
	if (soap_out_ns__ErrMessage(soap, "retCode", -1, &a->retCode, ""))
		return soap->error;
	if (soap_out_unsignedByte(soap, "DoneCode", -1, &a->DoneCode, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "HostType", -1, &a->HostType, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "FirmwareVersion", -1, &a->FirmwareVersion, ""))
		return soap->error;
	soap_out_Array64Ofbyte(soap, "HostName", -1, a->HostName, "");
	soap_out_Array64Ofbyte(soap, "HostInfo", -1, a->HostInfo, "");
	if (soap_out_unsignedByte(soap, "ConnetType", -1, &a->ConnetType, ""))
		return soap->error;
	soap_out_Array8OfunsignedByte(soap, "IEEEAdd", -1, a->IEEEAdd, "");
	if (soap_out_unsignedByte(soap, "IEEEAdd-Flag", -1, &a->IEEEAdd_Flag, ""))
		return soap->error;
	soap_out_Array2OfunsignedByte(soap, "PANID", -1, a->PANID, "");
	if (soap_out_unsignedByte(soap, "PANID-Flag", -1, &a->PANID_Flag, ""))
		return soap->error;
	soap_out_Array8OfunsignedByte(soap, "EPANID", -1, a->EPANID, "");
	if (soap_out_unsignedByte(soap, "EPANID-Flag", -1, &a->EPANID_Flag, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "SensorNum", -1, &a->SensorNum, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "RelayNum", -1, &a->RelayNum, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "ANSensorNum", -1, &a->ANSensorNum, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "ANRelayNum", -1, &a->ANRelayNum, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__GetHostDetailsRsp * SOAP_FMAC4 soap_in_ns__GetHostDetailsRsp(struct soap *soap, const char *tag, struct ns__GetHostDetailsRsp *a, const char *type)
{
	size_t soap_flag_retCode = 1;
	size_t soap_flag_DoneCode = 1;
	size_t soap_flag_HostType = 1;
	size_t soap_flag_FirmwareVersion = 1;
	size_t soap_flag_HostName = 1;
	size_t soap_flag_HostInfo = 1;
	size_t soap_flag_ConnetType = 1;
	size_t soap_flag_IEEEAdd = 1;
	size_t soap_flag_IEEEAdd_Flag = 1;
	size_t soap_flag_PANID = 1;
	size_t soap_flag_PANID_Flag = 1;
	size_t soap_flag_EPANID = 1;
	size_t soap_flag_EPANID_Flag = 1;
	size_t soap_flag_SensorNum = 1;
	size_t soap_flag_RelayNum = 1;
	size_t soap_flag_ANSensorNum = 1;
	size_t soap_flag_ANRelayNum = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__GetHostDetailsRsp *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__GetHostDetailsRsp, sizeof(struct ns__GetHostDetailsRsp), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__GetHostDetailsRsp(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_retCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__ErrMessage(soap, "retCode", &a->retCode, "ns:ErrMessage"))
				{	soap_flag_retCode--;
					continue;
				}
			if (soap_flag_DoneCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "DoneCode", &a->DoneCode, "xsd:unsignedByte"))
				{	soap_flag_DoneCode--;
					continue;
				}
			if (soap_flag_HostType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "HostType", &a->HostType, "xsd:unsignedShort"))
				{	soap_flag_HostType--;
					continue;
				}
			if (soap_flag_FirmwareVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "FirmwareVersion", &a->FirmwareVersion, "xsd:unsignedShort"))
				{	soap_flag_FirmwareVersion--;
					continue;
				}
			if (soap_flag_HostName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array64Ofbyte(soap, "HostName", a->HostName, "xsd:byte"))
				{	soap_flag_HostName--;
					continue;
				}
			if (soap_flag_HostInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array64Ofbyte(soap, "HostInfo", a->HostInfo, "xsd:byte"))
				{	soap_flag_HostInfo--;
					continue;
				}
			if (soap_flag_ConnetType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "ConnetType", &a->ConnetType, "xsd:unsignedByte"))
				{	soap_flag_ConnetType--;
					continue;
				}
			if (soap_flag_IEEEAdd && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array8OfunsignedByte(soap, "IEEEAdd", a->IEEEAdd, "xsd:unsignedByte"))
				{	soap_flag_IEEEAdd--;
					continue;
				}
			if (soap_flag_IEEEAdd_Flag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "IEEEAdd-Flag", &a->IEEEAdd_Flag, "xsd:unsignedByte"))
				{	soap_flag_IEEEAdd_Flag--;
					continue;
				}
			if (soap_flag_PANID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array2OfunsignedByte(soap, "PANID", a->PANID, "xsd:unsignedByte"))
				{	soap_flag_PANID--;
					continue;
				}
			if (soap_flag_PANID_Flag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "PANID-Flag", &a->PANID_Flag, "xsd:unsignedByte"))
				{	soap_flag_PANID_Flag--;
					continue;
				}
			if (soap_flag_EPANID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array8OfunsignedByte(soap, "EPANID", a->EPANID, "xsd:unsignedByte"))
				{	soap_flag_EPANID--;
					continue;
				}
			if (soap_flag_EPANID_Flag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedByte(soap, "EPANID-Flag", &a->EPANID_Flag, "xsd:unsignedByte"))
				{	soap_flag_EPANID_Flag--;
					continue;
				}
			if (soap_flag_SensorNum && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "SensorNum", &a->SensorNum, "xsd:unsignedShort"))
				{	soap_flag_SensorNum--;
					continue;
				}
			if (soap_flag_RelayNum && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "RelayNum", &a->RelayNum, "xsd:unsignedShort"))
				{	soap_flag_RelayNum--;
					continue;
				}
			if (soap_flag_ANSensorNum && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "ANSensorNum", &a->ANSensorNum, "xsd:unsignedShort"))
				{	soap_flag_ANSensorNum--;
					continue;
				}
			if (soap_flag_ANRelayNum && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "ANRelayNum", &a->ANRelayNum, "xsd:unsignedShort"))
				{	soap_flag_ANRelayNum--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__GetHostDetailsRsp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__GetHostDetailsRsp, 0, sizeof(struct ns__GetHostDetailsRsp), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_retCode > 0 || soap_flag_DoneCode > 0 || soap_flag_HostType > 0 || soap_flag_FirmwareVersion > 0 || soap_flag_HostName > 0 || soap_flag_HostInfo > 0 || soap_flag_ConnetType > 0 || soap_flag_IEEEAdd > 0 || soap_flag_IEEEAdd_Flag > 0 || soap_flag_PANID > 0 || soap_flag_PANID_Flag > 0 || soap_flag_EPANID > 0 || soap_flag_EPANID_Flag > 0 || soap_flag_SensorNum > 0 || soap_flag_RelayNum > 0 || soap_flag_ANSensorNum > 0 || soap_flag_ANRelayNum > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetHostDetailsRsp(struct soap *soap, const struct ns__GetHostDetailsRsp *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__GetHostDetailsRsp);
	if (soap_out_ns__GetHostDetailsRsp(soap, tag?tag:"ns:GetHostDetailsRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetHostDetailsRsp * SOAP_FMAC4 soap_get_ns__GetHostDetailsRsp(struct soap *soap, struct ns__GetHostDetailsRsp *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GetHostDetailsRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__GetHostDetailsRsp * SOAP_FMAC2 soap_instantiate_ns__GetHostDetailsRsp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GetHostDetailsRsp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__GetHostDetailsRsp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__GetHostDetailsRsp);
		if (size)
			*size = sizeof(struct ns__GetHostDetailsRsp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__GetHostDetailsRsp, n);
		if (size)
			*size = n * sizeof(struct ns__GetHostDetailsRsp);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__GetHostDetailsRsp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetHostDetailsRsp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__GetHostDetailsRsp %p -> %p\n", q, p));
	*(struct ns__GetHostDetailsRsp*)p = *(struct ns__GetHostDetailsRsp*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetHostDetailsReq(struct soap *soap, struct ns__GetHostDetailsReq *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->macID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetHostDetailsReq(struct soap *soap, const struct ns__GetHostDetailsReq *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetHostDetailsReq(struct soap *soap, const char *tag, int id, const struct ns__GetHostDetailsReq *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__GetHostDetailsReq), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "macID", -1, &a->macID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__GetHostDetailsReq * SOAP_FMAC4 soap_in_ns__GetHostDetailsReq(struct soap *soap, const char *tag, struct ns__GetHostDetailsReq *a, const char *type)
{
	size_t soap_flag_macID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__GetHostDetailsReq *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__GetHostDetailsReq, sizeof(struct ns__GetHostDetailsReq), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__GetHostDetailsReq(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_macID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "macID", &a->macID, "xsd:unsignedInt"))
				{	soap_flag_macID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__GetHostDetailsReq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__GetHostDetailsReq, 0, sizeof(struct ns__GetHostDetailsReq), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_macID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetHostDetailsReq(struct soap *soap, const struct ns__GetHostDetailsReq *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__GetHostDetailsReq);
	if (soap_out_ns__GetHostDetailsReq(soap, tag?tag:"ns:GetHostDetailsReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetHostDetailsReq * SOAP_FMAC4 soap_get_ns__GetHostDetailsReq(struct soap *soap, struct ns__GetHostDetailsReq *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GetHostDetailsReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__GetHostDetailsReq * SOAP_FMAC2 soap_instantiate_ns__GetHostDetailsReq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GetHostDetailsReq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__GetHostDetailsReq, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__GetHostDetailsReq);
		if (size)
			*size = sizeof(struct ns__GetHostDetailsReq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__GetHostDetailsReq, n);
		if (size)
			*size = n * sizeof(struct ns__GetHostDetailsReq);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__GetHostDetailsReq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetHostDetailsReq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__GetHostDetailsReq %p -> %p\n", q, p));
	*(struct ns__GetHostDetailsReq*)p = *(struct ns__GetHostDetailsReq*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__DeviceCtrlRsp(struct soap *soap, struct ns__DeviceCtrlRsp *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__DeviceCtrlRsp))
		soap_serialize_ns__DeviceCtrlRsp(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__DeviceCtrlRsp(struct soap *soap, const char *tag, int id, struct ns__DeviceCtrlRsp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__DeviceCtrlRsp);
	if (id < 0)
		return soap->error;
	return soap_out_ns__DeviceCtrlRsp(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__DeviceCtrlRsp ** SOAP_FMAC4 soap_in_PointerTons__DeviceCtrlRsp(struct soap *soap, const char *tag, struct ns__DeviceCtrlRsp **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__DeviceCtrlRsp **)soap_malloc(soap, sizeof(struct ns__DeviceCtrlRsp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__DeviceCtrlRsp(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__DeviceCtrlRsp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__DeviceCtrlRsp, sizeof(struct ns__DeviceCtrlRsp), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__DeviceCtrlRsp(struct soap *soap, struct ns__DeviceCtrlRsp *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__DeviceCtrlRsp);
	if (soap_out_PointerTons__DeviceCtrlRsp(soap, tag?tag:"ns:DeviceCtrlRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DeviceCtrlRsp ** SOAP_FMAC4 soap_get_PointerTons__DeviceCtrlRsp(struct soap *soap, struct ns__DeviceCtrlRsp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__DeviceCtrlRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__DeviceCtrlReq(struct soap *soap, struct ns__DeviceCtrlReq *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__DeviceCtrlReq))
		soap_serialize_ns__DeviceCtrlReq(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__DeviceCtrlReq(struct soap *soap, const char *tag, int id, struct ns__DeviceCtrlReq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__DeviceCtrlReq);
	if (id < 0)
		return soap->error;
	return soap_out_ns__DeviceCtrlReq(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__DeviceCtrlReq ** SOAP_FMAC4 soap_in_PointerTons__DeviceCtrlReq(struct soap *soap, const char *tag, struct ns__DeviceCtrlReq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__DeviceCtrlReq **)soap_malloc(soap, sizeof(struct ns__DeviceCtrlReq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__DeviceCtrlReq(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__DeviceCtrlReq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__DeviceCtrlReq, sizeof(struct ns__DeviceCtrlReq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__DeviceCtrlReq(struct soap *soap, struct ns__DeviceCtrlReq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__DeviceCtrlReq);
	if (soap_out_PointerTons__DeviceCtrlReq(soap, tag?tag:"ns:DeviceCtrlReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__DeviceCtrlReq ** SOAP_FMAC4 soap_get_PointerTons__DeviceCtrlReq(struct soap *soap, struct ns__DeviceCtrlReq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__DeviceCtrlReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__setDeviceParamRsp(struct soap *soap, struct ns__setDeviceParamRsp *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__setDeviceParamRsp))
		soap_serialize_ns__setDeviceParamRsp(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__setDeviceParamRsp(struct soap *soap, const char *tag, int id, struct ns__setDeviceParamRsp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__setDeviceParamRsp);
	if (id < 0)
		return soap->error;
	return soap_out_ns__setDeviceParamRsp(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__setDeviceParamRsp ** SOAP_FMAC4 soap_in_PointerTons__setDeviceParamRsp(struct soap *soap, const char *tag, struct ns__setDeviceParamRsp **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__setDeviceParamRsp **)soap_malloc(soap, sizeof(struct ns__setDeviceParamRsp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__setDeviceParamRsp(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__setDeviceParamRsp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__setDeviceParamRsp, sizeof(struct ns__setDeviceParamRsp), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__setDeviceParamRsp(struct soap *soap, struct ns__setDeviceParamRsp *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__setDeviceParamRsp);
	if (soap_out_PointerTons__setDeviceParamRsp(soap, tag?tag:"ns:setDeviceParamRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setDeviceParamRsp ** SOAP_FMAC4 soap_get_PointerTons__setDeviceParamRsp(struct soap *soap, struct ns__setDeviceParamRsp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__setDeviceParamRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__setDeviceParamReq(struct soap *soap, struct ns__setDeviceParamReq *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__setDeviceParamReq))
		soap_serialize_ns__setDeviceParamReq(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__setDeviceParamReq(struct soap *soap, const char *tag, int id, struct ns__setDeviceParamReq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__setDeviceParamReq);
	if (id < 0)
		return soap->error;
	return soap_out_ns__setDeviceParamReq(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__setDeviceParamReq ** SOAP_FMAC4 soap_in_PointerTons__setDeviceParamReq(struct soap *soap, const char *tag, struct ns__setDeviceParamReq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__setDeviceParamReq **)soap_malloc(soap, sizeof(struct ns__setDeviceParamReq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__setDeviceParamReq(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__setDeviceParamReq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__setDeviceParamReq, sizeof(struct ns__setDeviceParamReq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__setDeviceParamReq(struct soap *soap, struct ns__setDeviceParamReq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__setDeviceParamReq);
	if (soap_out_PointerTons__setDeviceParamReq(soap, tag?tag:"ns:setDeviceParamReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setDeviceParamReq ** SOAP_FMAC4 soap_get_PointerTons__setDeviceParamReq(struct soap *soap, struct ns__setDeviceParamReq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__setDeviceParamReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__GetDeviceParamRsp(struct soap *soap, struct ns__GetDeviceParamRsp *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__GetDeviceParamRsp))
		soap_serialize_ns__GetDeviceParamRsp(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__GetDeviceParamRsp(struct soap *soap, const char *tag, int id, struct ns__GetDeviceParamRsp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__GetDeviceParamRsp);
	if (id < 0)
		return soap->error;
	return soap_out_ns__GetDeviceParamRsp(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__GetDeviceParamRsp ** SOAP_FMAC4 soap_in_PointerTons__GetDeviceParamRsp(struct soap *soap, const char *tag, struct ns__GetDeviceParamRsp **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__GetDeviceParamRsp **)soap_malloc(soap, sizeof(struct ns__GetDeviceParamRsp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__GetDeviceParamRsp(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__GetDeviceParamRsp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__GetDeviceParamRsp, sizeof(struct ns__GetDeviceParamRsp), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__GetDeviceParamRsp(struct soap *soap, struct ns__GetDeviceParamRsp *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__GetDeviceParamRsp);
	if (soap_out_PointerTons__GetDeviceParamRsp(soap, tag?tag:"ns:GetDeviceParamRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetDeviceParamRsp ** SOAP_FMAC4 soap_get_PointerTons__GetDeviceParamRsp(struct soap *soap, struct ns__GetDeviceParamRsp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__GetDeviceParamRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__GetDeviceParamReq(struct soap *soap, struct ns__GetDeviceParamReq *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__GetDeviceParamReq))
		soap_serialize_ns__GetDeviceParamReq(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__GetDeviceParamReq(struct soap *soap, const char *tag, int id, struct ns__GetDeviceParamReq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__GetDeviceParamReq);
	if (id < 0)
		return soap->error;
	return soap_out_ns__GetDeviceParamReq(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__GetDeviceParamReq ** SOAP_FMAC4 soap_in_PointerTons__GetDeviceParamReq(struct soap *soap, const char *tag, struct ns__GetDeviceParamReq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__GetDeviceParamReq **)soap_malloc(soap, sizeof(struct ns__GetDeviceParamReq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__GetDeviceParamReq(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__GetDeviceParamReq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__GetDeviceParamReq, sizeof(struct ns__GetDeviceParamReq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__GetDeviceParamReq(struct soap *soap, struct ns__GetDeviceParamReq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__GetDeviceParamReq);
	if (soap_out_PointerTons__GetDeviceParamReq(soap, tag?tag:"ns:GetDeviceParamReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetDeviceParamReq ** SOAP_FMAC4 soap_get_PointerTons__GetDeviceParamReq(struct soap *soap, struct ns__GetDeviceParamReq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__GetDeviceParamReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__GetDeviceListRsp(struct soap *soap, struct ns__GetDeviceListRsp *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__GetDeviceListRsp))
		soap_serialize_ns__GetDeviceListRsp(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__GetDeviceListRsp(struct soap *soap, const char *tag, int id, struct ns__GetDeviceListRsp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__GetDeviceListRsp);
	if (id < 0)
		return soap->error;
	return soap_out_ns__GetDeviceListRsp(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__GetDeviceListRsp ** SOAP_FMAC4 soap_in_PointerTons__GetDeviceListRsp(struct soap *soap, const char *tag, struct ns__GetDeviceListRsp **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__GetDeviceListRsp **)soap_malloc(soap, sizeof(struct ns__GetDeviceListRsp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__GetDeviceListRsp(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__GetDeviceListRsp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__GetDeviceListRsp, sizeof(struct ns__GetDeviceListRsp), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__GetDeviceListRsp(struct soap *soap, struct ns__GetDeviceListRsp *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__GetDeviceListRsp);
	if (soap_out_PointerTons__GetDeviceListRsp(soap, tag?tag:"ns:GetDeviceListRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetDeviceListRsp ** SOAP_FMAC4 soap_get_PointerTons__GetDeviceListRsp(struct soap *soap, struct ns__GetDeviceListRsp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__GetDeviceListRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__GetDeviceListReq(struct soap *soap, struct ns__GetDeviceListReq *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__GetDeviceListReq))
		soap_serialize_ns__GetDeviceListReq(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__GetDeviceListReq(struct soap *soap, const char *tag, int id, struct ns__GetDeviceListReq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__GetDeviceListReq);
	if (id < 0)
		return soap->error;
	return soap_out_ns__GetDeviceListReq(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__GetDeviceListReq ** SOAP_FMAC4 soap_in_PointerTons__GetDeviceListReq(struct soap *soap, const char *tag, struct ns__GetDeviceListReq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__GetDeviceListReq **)soap_malloc(soap, sizeof(struct ns__GetDeviceListReq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__GetDeviceListReq(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__GetDeviceListReq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__GetDeviceListReq, sizeof(struct ns__GetDeviceListReq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__GetDeviceListReq(struct soap *soap, struct ns__GetDeviceListReq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__GetDeviceListReq);
	if (soap_out_PointerTons__GetDeviceListReq(soap, tag?tag:"ns:GetDeviceListReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetDeviceListReq ** SOAP_FMAC4 soap_get_PointerTons__GetDeviceListReq(struct soap *soap, struct ns__GetDeviceListReq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__GetDeviceListReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__RemoveDeviceRsp(struct soap *soap, struct ns__RemoveDeviceRsp *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__RemoveDeviceRsp))
		soap_serialize_ns__RemoveDeviceRsp(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__RemoveDeviceRsp(struct soap *soap, const char *tag, int id, struct ns__RemoveDeviceRsp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__RemoveDeviceRsp);
	if (id < 0)
		return soap->error;
	return soap_out_ns__RemoveDeviceRsp(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__RemoveDeviceRsp ** SOAP_FMAC4 soap_in_PointerTons__RemoveDeviceRsp(struct soap *soap, const char *tag, struct ns__RemoveDeviceRsp **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__RemoveDeviceRsp **)soap_malloc(soap, sizeof(struct ns__RemoveDeviceRsp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__RemoveDeviceRsp(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__RemoveDeviceRsp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__RemoveDeviceRsp, sizeof(struct ns__RemoveDeviceRsp), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__RemoveDeviceRsp(struct soap *soap, struct ns__RemoveDeviceRsp *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__RemoveDeviceRsp);
	if (soap_out_PointerTons__RemoveDeviceRsp(soap, tag?tag:"ns:RemoveDeviceRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__RemoveDeviceRsp ** SOAP_FMAC4 soap_get_PointerTons__RemoveDeviceRsp(struct soap *soap, struct ns__RemoveDeviceRsp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__RemoveDeviceRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__RemoveDeviceReq(struct soap *soap, struct ns__RemoveDeviceReq *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__RemoveDeviceReq))
		soap_serialize_ns__RemoveDeviceReq(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__RemoveDeviceReq(struct soap *soap, const char *tag, int id, struct ns__RemoveDeviceReq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__RemoveDeviceReq);
	if (id < 0)
		return soap->error;
	return soap_out_ns__RemoveDeviceReq(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__RemoveDeviceReq ** SOAP_FMAC4 soap_in_PointerTons__RemoveDeviceReq(struct soap *soap, const char *tag, struct ns__RemoveDeviceReq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__RemoveDeviceReq **)soap_malloc(soap, sizeof(struct ns__RemoveDeviceReq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__RemoveDeviceReq(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__RemoveDeviceReq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__RemoveDeviceReq, sizeof(struct ns__RemoveDeviceReq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__RemoveDeviceReq(struct soap *soap, struct ns__RemoveDeviceReq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__RemoveDeviceReq);
	if (soap_out_PointerTons__RemoveDeviceReq(soap, tag?tag:"ns:RemoveDeviceReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__RemoveDeviceReq ** SOAP_FMAC4 soap_get_PointerTons__RemoveDeviceReq(struct soap *soap, struct ns__RemoveDeviceReq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__RemoveDeviceReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__SetHostDetailsRsp(struct soap *soap, struct ns__SetHostDetailsRsp *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__SetHostDetailsRsp))
		soap_serialize_ns__SetHostDetailsRsp(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__SetHostDetailsRsp(struct soap *soap, const char *tag, int id, struct ns__SetHostDetailsRsp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__SetHostDetailsRsp);
	if (id < 0)
		return soap->error;
	return soap_out_ns__SetHostDetailsRsp(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__SetHostDetailsRsp ** SOAP_FMAC4 soap_in_PointerTons__SetHostDetailsRsp(struct soap *soap, const char *tag, struct ns__SetHostDetailsRsp **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__SetHostDetailsRsp **)soap_malloc(soap, sizeof(struct ns__SetHostDetailsRsp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__SetHostDetailsRsp(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__SetHostDetailsRsp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__SetHostDetailsRsp, sizeof(struct ns__SetHostDetailsRsp), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__SetHostDetailsRsp(struct soap *soap, struct ns__SetHostDetailsRsp *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__SetHostDetailsRsp);
	if (soap_out_PointerTons__SetHostDetailsRsp(soap, tag?tag:"ns:SetHostDetailsRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__SetHostDetailsRsp ** SOAP_FMAC4 soap_get_PointerTons__SetHostDetailsRsp(struct soap *soap, struct ns__SetHostDetailsRsp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__SetHostDetailsRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__SetHostDetailsReq(struct soap *soap, struct ns__SetHostDetailsReq *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__SetHostDetailsReq))
		soap_serialize_ns__SetHostDetailsReq(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__SetHostDetailsReq(struct soap *soap, const char *tag, int id, struct ns__SetHostDetailsReq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__SetHostDetailsReq);
	if (id < 0)
		return soap->error;
	return soap_out_ns__SetHostDetailsReq(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__SetHostDetailsReq ** SOAP_FMAC4 soap_in_PointerTons__SetHostDetailsReq(struct soap *soap, const char *tag, struct ns__SetHostDetailsReq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__SetHostDetailsReq **)soap_malloc(soap, sizeof(struct ns__SetHostDetailsReq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__SetHostDetailsReq(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__SetHostDetailsReq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__SetHostDetailsReq, sizeof(struct ns__SetHostDetailsReq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__SetHostDetailsReq(struct soap *soap, struct ns__SetHostDetailsReq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__SetHostDetailsReq);
	if (soap_out_PointerTons__SetHostDetailsReq(soap, tag?tag:"ns:SetHostDetailsReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__SetHostDetailsReq ** SOAP_FMAC4 soap_get_PointerTons__SetHostDetailsReq(struct soap *soap, struct ns__SetHostDetailsReq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__SetHostDetailsReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__GetHostDetailsRsp(struct soap *soap, struct ns__GetHostDetailsRsp *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__GetHostDetailsRsp))
		soap_serialize_ns__GetHostDetailsRsp(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__GetHostDetailsRsp(struct soap *soap, const char *tag, int id, struct ns__GetHostDetailsRsp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__GetHostDetailsRsp);
	if (id < 0)
		return soap->error;
	return soap_out_ns__GetHostDetailsRsp(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__GetHostDetailsRsp ** SOAP_FMAC4 soap_in_PointerTons__GetHostDetailsRsp(struct soap *soap, const char *tag, struct ns__GetHostDetailsRsp **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__GetHostDetailsRsp **)soap_malloc(soap, sizeof(struct ns__GetHostDetailsRsp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__GetHostDetailsRsp(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__GetHostDetailsRsp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__GetHostDetailsRsp, sizeof(struct ns__GetHostDetailsRsp), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__GetHostDetailsRsp(struct soap *soap, struct ns__GetHostDetailsRsp *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__GetHostDetailsRsp);
	if (soap_out_PointerTons__GetHostDetailsRsp(soap, tag?tag:"ns:GetHostDetailsRsp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetHostDetailsRsp ** SOAP_FMAC4 soap_get_PointerTons__GetHostDetailsRsp(struct soap *soap, struct ns__GetHostDetailsRsp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__GetHostDetailsRsp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__GetHostDetailsReq(struct soap *soap, struct ns__GetHostDetailsReq *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__GetHostDetailsReq))
		soap_serialize_ns__GetHostDetailsReq(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__GetHostDetailsReq(struct soap *soap, const char *tag, int id, struct ns__GetHostDetailsReq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__GetHostDetailsReq);
	if (id < 0)
		return soap->error;
	return soap_out_ns__GetHostDetailsReq(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__GetHostDetailsReq ** SOAP_FMAC4 soap_in_PointerTons__GetHostDetailsReq(struct soap *soap, const char *tag, struct ns__GetHostDetailsReq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__GetHostDetailsReq **)soap_malloc(soap, sizeof(struct ns__GetHostDetailsReq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__GetHostDetailsReq(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__GetHostDetailsReq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__GetHostDetailsReq, sizeof(struct ns__GetHostDetailsReq), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__GetHostDetailsReq(struct soap *soap, struct ns__GetHostDetailsReq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__GetHostDetailsReq);
	if (soap_out_PointerTons__GetHostDetailsReq(soap, tag?tag:"ns:GetHostDetailsReq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetHostDetailsReq ** SOAP_FMAC4 soap_get_PointerTons__GetHostDetailsReq(struct soap *soap, struct ns__GetHostDetailsReq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__GetHostDetailsReq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTounsignedByte(struct soap *soap, unsigned char **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTounsignedByte))
		soap_serialize_PointerTounsignedByte(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTounsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTounsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char *** SOAP_FMAC4 soap_in_PointerToPointerTounsignedByte(struct soap *soap, const char *tag, unsigned char ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char ***)soap_malloc(soap, sizeof(unsigned char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTounsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTounsignedByte, sizeof(unsigned char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTounsignedByte(struct soap *soap, unsigned char **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTounsignedByte);
	if (soap_out_PointerToPointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char *** SOAP_FMAC4 soap_get_PointerToPointerTounsignedByte(struct soap *soap, unsigned char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons__stCall_DeviceNode(struct soap *soap, struct ns__stCall_DeviceNode **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons__stCall_DeviceNode))
		soap_serialize_PointerTons__stCall_DeviceNode(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons__stCall_DeviceNode(struct soap *soap, const char *tag, int id, struct ns__stCall_DeviceNode **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons__stCall_DeviceNode);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons__stCall_DeviceNode(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__stCall_DeviceNode *** SOAP_FMAC4 soap_in_PointerToPointerTons__stCall_DeviceNode(struct soap *soap, const char *tag, struct ns__stCall_DeviceNode ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__stCall_DeviceNode ***)soap_malloc(soap, sizeof(struct ns__stCall_DeviceNode **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons__stCall_DeviceNode(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__stCall_DeviceNode ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons__stCall_DeviceNode, sizeof(struct ns__stCall_DeviceNode *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons__stCall_DeviceNode(struct soap *soap, struct ns__stCall_DeviceNode **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons__stCall_DeviceNode);
	if (soap_out_PointerToPointerTons__stCall_DeviceNode(soap, tag?tag:"ns:stCall-DeviceNode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__stCall_DeviceNode *** SOAP_FMAC4 soap_get_PointerToPointerTons__stCall_DeviceNode(struct soap *soap, struct ns__stCall_DeviceNode ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons__stCall_DeviceNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__stCall_DeviceNode(struct soap *soap, struct ns__stCall_DeviceNode *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__stCall_DeviceNode))
		soap_serialize_ns__stCall_DeviceNode(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__stCall_DeviceNode(struct soap *soap, const char *tag, int id, struct ns__stCall_DeviceNode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__stCall_DeviceNode);
	if (id < 0)
		return soap->error;
	return soap_out_ns__stCall_DeviceNode(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__stCall_DeviceNode ** SOAP_FMAC4 soap_in_PointerTons__stCall_DeviceNode(struct soap *soap, const char *tag, struct ns__stCall_DeviceNode **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__stCall_DeviceNode **)soap_malloc(soap, sizeof(struct ns__stCall_DeviceNode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__stCall_DeviceNode(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__stCall_DeviceNode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__stCall_DeviceNode, sizeof(struct ns__stCall_DeviceNode), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__stCall_DeviceNode(struct soap *soap, struct ns__stCall_DeviceNode *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__stCall_DeviceNode);
	if (soap_out_PointerTons__stCall_DeviceNode(soap, tag?tag:"ns:stCall-DeviceNode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__stCall_DeviceNode ** SOAP_FMAC4 soap_get_PointerTons__stCall_DeviceNode(struct soap *soap, struct ns__stCall_DeviceNode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__stCall_DeviceNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array32Ofbyte(struct soap *soap, char a[32])
{
	int i;
	(void)soap; /* appease -Wall -Werror */
	for (i = 0; i < 32; i++)
	soap_default_byte(soap, a+i);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array32Ofbyte(struct soap *soap, char const a[32])
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array32Ofbyte(struct soap *soap, const char *tag, int id, char const a[32], const char *type)
{
	int i;
	soap_array_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Array32Ofbyte), "xsd:byte[32]", 0);
	for (i = 0; i < 32; i++)
	{
		soap_out_byte(soap, "item", -1, a+i, "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_Array32Ofbyte(struct soap *soap, const char *tag, char a[32], const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (char (*))soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array32Ofbyte, sizeof(char[32]), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_Array32Ofbyte(soap, a);
	if (soap->body && !*soap->href)
	{	int i;
		for (i = 0; i < 32; i++)
		{	soap_peek_element(soap);
			if (soap->position)
			{	i = soap->positions[0];
				if (i < 0 || i >= 32)
				{	soap->error = SOAP_IOB;
					return NULL;
				}
			}
			if (!soap_in_byte(soap, NULL, a+i, "xsd:byte"))
			{	if (soap->error != SOAP_NO_TAG)
					return NULL;
				soap->error = SOAP_OK;
				break;
			}
		}
		if (soap->mode & SOAP_C_NOIOB)
			while (soap_element_end_in(soap, tag) == SOAP_SYNTAX_ERROR)
			{	soap->peeked = 1;
				soap_ignore_element(soap);
			}
		else if (soap_element_end_in(soap, tag))
		{	if (soap->error == SOAP_SYNTAX_ERROR)
				soap->error = SOAP_IOB;
			return NULL;
		}
	}
	else
	{	a = (char (*))soap_id_forward(soap, soap->href, (void*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array32Ofbyte, sizeof(char[32]), 0, NULL, NULL, NULL), 0, SOAP_TYPE_Array32Ofbyte, 0, sizeof(char[32]), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return (char *)a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array32Ofbyte(struct soap *soap, char const a[32], const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Array32Ofbyte);
	if (soap_out_Array32Ofbyte(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_Array32Ofbyte(struct soap *soap, char a[32], const char *tag, const char *type)
{	char (*p);
	if ((p = soap_in_Array32Ofbyte(soap, tag, a, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array24OfunsignedByte(struct soap *soap, unsigned char a[24])
{
	int i;
	(void)soap; /* appease -Wall -Werror */
	for (i = 0; i < 24; i++)
	soap_default_unsignedByte(soap, a+i);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array24OfunsignedByte(struct soap *soap, unsigned char const a[24])
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array24OfunsignedByte(struct soap *soap, const char *tag, int id, unsigned char const a[24], const char *type)
{
	int i;
	soap_array_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Array24OfunsignedByte), "xsd:unsignedByte[24]", 0);
	for (i = 0; i < 24; i++)
	{
		soap_out_unsignedByte(soap, "item", -1, a+i, "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_Array24OfunsignedByte(struct soap *soap, const char *tag, unsigned char a[24], const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (unsigned char (*))soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array24OfunsignedByte, sizeof(unsigned char[24]), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_Array24OfunsignedByte(soap, a);
	if (soap->body && !*soap->href)
	{	int i;
		for (i = 0; i < 24; i++)
		{	soap_peek_element(soap);
			if (soap->position)
			{	i = soap->positions[0];
				if (i < 0 || i >= 24)
				{	soap->error = SOAP_IOB;
					return NULL;
				}
			}
			if (!soap_in_unsignedByte(soap, NULL, a+i, "xsd:unsignedByte"))
			{	if (soap->error != SOAP_NO_TAG)
					return NULL;
				soap->error = SOAP_OK;
				break;
			}
		}
		if (soap->mode & SOAP_C_NOIOB)
			while (soap_element_end_in(soap, tag) == SOAP_SYNTAX_ERROR)
			{	soap->peeked = 1;
				soap_ignore_element(soap);
			}
		else if (soap_element_end_in(soap, tag))
		{	if (soap->error == SOAP_SYNTAX_ERROR)
				soap->error = SOAP_IOB;
			return NULL;
		}
	}
	else
	{	a = (unsigned char (*))soap_id_forward(soap, soap->href, (void*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array24OfunsignedByte, sizeof(unsigned char[24]), 0, NULL, NULL, NULL), 0, SOAP_TYPE_Array24OfunsignedByte, 0, sizeof(unsigned char[24]), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return (unsigned char *)a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array24OfunsignedByte(struct soap *soap, unsigned char const a[24], const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Array24OfunsignedByte);
	if (soap_out_Array24OfunsignedByte(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_Array24OfunsignedByte(struct soap *soap, unsigned char a[24], const char *tag, const char *type)
{	unsigned char (*p);
	if ((p = soap_in_Array24OfunsignedByte(soap, tag, a, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array2OfunsignedByte(struct soap *soap, unsigned char a[2])
{
	int i;
	(void)soap; /* appease -Wall -Werror */
	for (i = 0; i < 2; i++)
	soap_default_unsignedByte(soap, a+i);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array2OfunsignedByte(struct soap *soap, unsigned char const a[2])
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array2OfunsignedByte(struct soap *soap, const char *tag, int id, unsigned char const a[2], const char *type)
{
	int i;
	soap_array_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Array2OfunsignedByte), "xsd:unsignedByte[2]", 0);
	for (i = 0; i < 2; i++)
	{
		soap_out_unsignedByte(soap, "item", -1, a+i, "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_Array2OfunsignedByte(struct soap *soap, const char *tag, unsigned char a[2], const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (unsigned char (*))soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array2OfunsignedByte, sizeof(unsigned char[2]), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_Array2OfunsignedByte(soap, a);
	if (soap->body && !*soap->href)
	{	int i;
		for (i = 0; i < 2; i++)
		{	soap_peek_element(soap);
			if (soap->position)
			{	i = soap->positions[0];
				if (i < 0 || i >= 2)
				{	soap->error = SOAP_IOB;
					return NULL;
				}
			}
			if (!soap_in_unsignedByte(soap, NULL, a+i, "xsd:unsignedByte"))
			{	if (soap->error != SOAP_NO_TAG)
					return NULL;
				soap->error = SOAP_OK;
				break;
			}
		}
		if (soap->mode & SOAP_C_NOIOB)
			while (soap_element_end_in(soap, tag) == SOAP_SYNTAX_ERROR)
			{	soap->peeked = 1;
				soap_ignore_element(soap);
			}
		else if (soap_element_end_in(soap, tag))
		{	if (soap->error == SOAP_SYNTAX_ERROR)
				soap->error = SOAP_IOB;
			return NULL;
		}
	}
	else
	{	a = (unsigned char (*))soap_id_forward(soap, soap->href, (void*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array2OfunsignedByte, sizeof(unsigned char[2]), 0, NULL, NULL, NULL), 0, SOAP_TYPE_Array2OfunsignedByte, 0, sizeof(unsigned char[2]), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return (unsigned char *)a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array2OfunsignedByte(struct soap *soap, unsigned char const a[2], const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Array2OfunsignedByte);
	if (soap_out_Array2OfunsignedByte(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_Array2OfunsignedByte(struct soap *soap, unsigned char a[2], const char *tag, const char *type)
{	unsigned char (*p);
	if ((p = soap_in_Array2OfunsignedByte(soap, tag, a, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array8OfunsignedByte(struct soap *soap, unsigned char a[8])
{
	int i;
	(void)soap; /* appease -Wall -Werror */
	for (i = 0; i < 8; i++)
	soap_default_unsignedByte(soap, a+i);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array8OfunsignedByte(struct soap *soap, unsigned char const a[8])
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array8OfunsignedByte(struct soap *soap, const char *tag, int id, unsigned char const a[8], const char *type)
{
	int i;
	soap_array_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Array8OfunsignedByte), "xsd:unsignedByte[8]", 0);
	for (i = 0; i < 8; i++)
	{
		soap_out_unsignedByte(soap, "item", -1, a+i, "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_Array8OfunsignedByte(struct soap *soap, const char *tag, unsigned char a[8], const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (unsigned char (*))soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array8OfunsignedByte, sizeof(unsigned char[8]), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_Array8OfunsignedByte(soap, a);
	if (soap->body && !*soap->href)
	{	int i;
		for (i = 0; i < 8; i++)
		{	soap_peek_element(soap);
			if (soap->position)
			{	i = soap->positions[0];
				if (i < 0 || i >= 8)
				{	soap->error = SOAP_IOB;
					return NULL;
				}
			}
			if (!soap_in_unsignedByte(soap, NULL, a+i, "xsd:unsignedByte"))
			{	if (soap->error != SOAP_NO_TAG)
					return NULL;
				soap->error = SOAP_OK;
				break;
			}
		}
		if (soap->mode & SOAP_C_NOIOB)
			while (soap_element_end_in(soap, tag) == SOAP_SYNTAX_ERROR)
			{	soap->peeked = 1;
				soap_ignore_element(soap);
			}
		else if (soap_element_end_in(soap, tag))
		{	if (soap->error == SOAP_SYNTAX_ERROR)
				soap->error = SOAP_IOB;
			return NULL;
		}
	}
	else
	{	a = (unsigned char (*))soap_id_forward(soap, soap->href, (void*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array8OfunsignedByte, sizeof(unsigned char[8]), 0, NULL, NULL, NULL), 0, SOAP_TYPE_Array8OfunsignedByte, 0, sizeof(unsigned char[8]), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return (unsigned char *)a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array8OfunsignedByte(struct soap *soap, unsigned char const a[8], const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Array8OfunsignedByte);
	if (soap_out_Array8OfunsignedByte(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_Array8OfunsignedByte(struct soap *soap, unsigned char a[8], const char *tag, const char *type)
{	unsigned char (*p);
	if ((p = soap_in_Array8OfunsignedByte(soap, tag, a, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array64Ofbyte(struct soap *soap, char a[64])
{
	int i;
	(void)soap; /* appease -Wall -Werror */
	for (i = 0; i < 64; i++)
	soap_default_byte(soap, a+i);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array64Ofbyte(struct soap *soap, char const a[64])
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array64Ofbyte(struct soap *soap, const char *tag, int id, char const a[64], const char *type)
{
	int i;
	soap_array_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Array64Ofbyte), "xsd:byte[64]", 0);
	for (i = 0; i < 64; i++)
	{
		soap_out_byte(soap, "item", -1, a+i, "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_Array64Ofbyte(struct soap *soap, const char *tag, char a[64], const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (char (*))soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array64Ofbyte, sizeof(char[64]), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_Array64Ofbyte(soap, a);
	if (soap->body && !*soap->href)
	{	int i;
		for (i = 0; i < 64; i++)
		{	soap_peek_element(soap);
			if (soap->position)
			{	i = soap->positions[0];
				if (i < 0 || i >= 64)
				{	soap->error = SOAP_IOB;
					return NULL;
				}
			}
			if (!soap_in_byte(soap, NULL, a+i, "xsd:byte"))
			{	if (soap->error != SOAP_NO_TAG)
					return NULL;
				soap->error = SOAP_OK;
				break;
			}
		}
		if (soap->mode & SOAP_C_NOIOB)
			while (soap_element_end_in(soap, tag) == SOAP_SYNTAX_ERROR)
			{	soap->peeked = 1;
				soap_ignore_element(soap);
			}
		else if (soap_element_end_in(soap, tag))
		{	if (soap->error == SOAP_SYNTAX_ERROR)
				soap->error = SOAP_IOB;
			return NULL;
		}
	}
	else
	{	a = (char (*))soap_id_forward(soap, soap->href, (void*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array64Ofbyte, sizeof(char[64]), 0, NULL, NULL, NULL), 0, SOAP_TYPE_Array64Ofbyte, 0, sizeof(char[64]), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return (char *)a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array64Ofbyte(struct soap *soap, char const a[64], const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Array64Ofbyte);
	if (soap_out_Array64Ofbyte(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_Array64Ofbyte(struct soap *soap, char a[64], const char *tag, const char *type)
{	char (*p);
	if ((p = soap_in_Array64Ofbyte(soap, tag, a, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
